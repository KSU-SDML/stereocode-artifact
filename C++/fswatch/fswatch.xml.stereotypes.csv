Class Name,Class Stereotype,Method Name,Method Stereotype
"inotify_monitor","commander","inotify_monitor::inotify_monitor","constructor",
"inotify_monitor","commander","inotify_monitor::~inotify_monitor","destructor",
"inotify_monitor","commander","inotify_monitor::add_watch","predicate non-void-command collaborator",
"inotify_monitor","commander","inotify_monitor::scan","command",
"inotify_monitor","commander","inotify_monitor::is_watched","predicate",
"inotify_monitor","commander","inotify_monitor::scan_root_paths","command",
"inotify_monitor","commander","inotify_monitor::preprocess_dir_event","command collaborator",
"inotify_monitor","commander","inotify_monitor::preprocess_node_event","command collaborator",
"inotify_monitor","commander","inotify_monitor::preprocess_event","command collaborator",
"inotify_monitor","commander","inotify_monitor::remove_watch","command",
"inotify_monitor","commander","inotify_monitor::process_pending_events","command",
"inotify_monitor","commander","inotify_monitor::run","command collaborator",
"fen_monitor_load","commander boundary","initialize_fen","set",
"fen_monitor_load","commander boundary","~fen_monitor_load","destructor",
"fen_monitor_load","commander boundary","close_fen","set",
"fen_monitor_load","commander boundary","add_watch","set collaborator",
"fen_monitor_load","commander boundary","remove_watch","command collaborator",
"fen_monitor_load","commander boundary","get_descriptor_by_name","property non-void-command collaborator",
"event","lazy-class","event::event","copy-constructor",
"event","lazy-class","event::event","copy-constructor",
"event","lazy-class","event::get_path","get",
"event","lazy-class","event::get_time","get collaborator",
"event","lazy-class","event::get_flags","get collaborator",
"event","lazy-class","event::get_correlation_id","get",
"event","lazy-class","event::get_event_flag_by_name","controller stateless",
"event","lazy-class","event::get_event_flag_name","controller stateless",
"fen_monitor","boundary","fen_monitor::fen_monitor","constructor",
"fen_monitor","boundary","fen_monitor::~fen_monitor","destructor",
"fen_monitor","boundary","fen_monitor::associate_port","predicate non-void-command collaborator",
"fen_monitor","boundary","fen_monitor::add_watch","predicate non-void-command collaborator",
"fen_monitor","boundary","fen_monitor::is_path_watched","predicate",
"fen_monitor","boundary","fen_monitor::scan","predicate non-void-command",
"fen_monitor","boundary","fen_monitor::scan_root_paths","command",
"fen_monitor","boundary","fen_monitor::process_events","command collaborator",
"fen_monitor","boundary","fen_monitor::rescan_removed","command collaborator",
"fen_monitor","boundary","fen_monitor::rescan_pending","command collaborator",
"fen_monitor","boundary","fen_monitor::run","command",
"monitor_factory","entity boundary","monitor_factory::create_monitor","factory wrapper stateless",
"monitor_factory","entity boundary","monitor_factory::creators_by_string","wrapper stateless",
"monitor_factory","entity boundary","monitor_factory::create_monitor","property non-void-command collaborator",
"monitor_factory","entity boundary","monitor_factory::exists_type","predicate non-void-command collaborator",
"monitor_factory","entity boundary","monitor_factory::get_types","property non-void-command collaborator",
"directory_change_event","unclassified","directory_change_event::directory_change_event","constructor",
"directory_change_event","unclassified","directory_change_event::is_io_incomplete","predicate non-void-command",
"directory_change_event","unclassified","directory_change_event::is_buffer_overflowed","predicate non-void-command",
"directory_change_event","unclassified","directory_change_event::read_changes_async","predicate non-void-command",
"directory_change_event","unclassified","directory_change_event::try_read","predicate set",
"directory_change_event","unclassified","directory_change_event::continue_read","command",
"directory_change_event","unclassified","directory_change_event::get_events","property non-void-command collaborator",
"fsevents_monitor","unclassified","fsevents_monitor::fsevents_monitor","constructor",
"fsevents_monitor","unclassified","fsevents_monitor::run","command collaborator",
"fsevents_monitor","unclassified","fsevents_monitor::fsevents_callback","controller stateless",
"fsevents_monitor","unclassified","fsevents_monitor::no_defer","predicate controller",
"fsevents_monitor","unclassified","fsevents_monitor::create_stream","set collaborator",
"poll_monitor","boundary","poll_monitor::poll_monitor","constructor",
"poll_monitor","boundary","poll_monitor::initial_scan_callback","predicate set collaborator",
"poll_monitor","boundary","poll_monitor::intermediate_scan_callback","predicate collaborator",
"poll_monitor","boundary","poll_monitor::add_path","collaborator incidental",
"windows_monitor","entity commander boundary","windows_monitor::windows_monitor","constructor",
"windows_monitor","entity commander boundary","windows_monitor::~windows_monitor","destructor",
"windows_monitor","entity commander boundary","windows_monitor::initialize_windows_path_list","command collaborator",
"windows_monitor","entity commander boundary","windows_monitor::initialize_events","command collaborator",
"windows_monitor","entity commander boundary","windows_monitor::init_search_for_path","predicate set collaborator",
"windows_monitor","entity commander boundary","windows_monitor::stop_search_for_path","command collaborator",
"windows_monitor","entity commander boundary","windows_monitor::is_path_watched","predicate non-void-command collaborator",
"windows_monitor","entity commander boundary","windows_monitor::process_path","command collaborator",
"windows_monitor","entity commander boundary","windows_monitor::configure_monitor","set",
"windows_monitor","entity commander boundary","windows_monitor::run","command collaborator",
"kqueue_monitor","commander","kqueue_monitor::kqueue_monitor","constructor",
"kqueue_monitor","commander","kqueue_monitor::~kqueue_monitor","destructor",
"kqueue_monitor","commander","kqueue_monitor::is_path_watched","predicate",
"kqueue_monitor","commander","kqueue_monitor::add_watch","predicate non-void-command collaborator",
"kqueue_monitor","commander","kqueue_monitor::scan","predicate non-void-command",
"kqueue_monitor","commander","kqueue_monitor::remove_deleted","command collaborator",
"kqueue_monitor","commander","kqueue_monitor::rescan_pending","command",
"kqueue_monitor","commander","kqueue_monitor::scan_root_paths","command",
"kqueue_monitor","commander","kqueue_monitor::initialize_kqueue","set",
"kqueue_monitor","commander","kqueue_monitor::terminate_kqueue","set",
"kqueue_monitor","commander","kqueue_monitor::wait_for_events","property controller",
"kqueue_monitor","commander","kqueue_monitor::process_events","command collaborator",
"kqueue_monitor","commander","kqueue_monitor::run","command",
"libfsw_exception","data-provider","libfsw_exception::libfsw_exception","constructor",
"libfsw_exception","data-provider","libfsw_exception::what","property",
"libfsw_exception","data-provider","libfsw_exception::error_code","get",
"libfsw_exception","data-provider","libfsw_exception::operatorint","get",
"libfsw_exception","data-provider","libfsw_exception::libfsw_exception","copy-constructor",
"libfsw_exception","data-provider","libfsw_exception::operator=","property non-void-command",
"monitor","commander","monitor::monitor","constructor",
"monitor","commander","monitor::set_allow_overflow","set",
"monitor","commander","monitor::set_latency","set",
"monitor","commander","monitor::set_fire_idle_event","set",
"monitor","commander","monitor::get_latency_ms","property wrapper",
"monitor","commander","monitor::set_recursive","set",
"monitor","commander","monitor::set_directory_only","set",
"monitor","commander","monitor::add_event_type_filter","command collaborator",
"monitor","commander","monitor::set_event_type_filters","command collaborator",
"monitor","commander","monitor::add_filter","command collaborator",
"monitor","commander","monitor::set_property","set",
"monitor","commander","monitor::set_properties","set",
"monitor","commander","monitor::get_property","get",
"monitor","commander","monitor::set_filters","command collaborator",
"monitor","commander","monitor::set_follow_symlinks","set",
"monitor","commander","monitor::set_watch_access","set",
"monitor","commander","monitor::accept_event_type","predicate collaborator",
"monitor","commander","monitor::accept_path","predicate wrapper",
"monitor","commander","monitor::get_context","get collaborator",
"monitor","commander","monitor::set_context","set",
"monitor","commander","monitor::set_bubble_events","set",
"monitor","commander","monitor::~monitor","destructor",
"monitor","commander","monitor::inactivity_callback","controller stateless",
"monitor","commander","monitor::start","command collaborator",
"monitor","commander","monitor::stop","set",
"monitor","commander","monitor::is_running","get",
"monitor","commander","monitor::filter_flags","property collaborator",
"monitor","commander","monitor::notify_overflow","wrapper",
"monitor","commander","monitor::notify_events","collaborator",
"monitor","commander","monitor::on_stop","empty",
"kqueue_monitor_load","commander","add_watch","command collaborator",
"kqueue_monitor_load","commander","remove_watch","command",
"kqueue_monitor_load","commander","remove_watch","command",
"win_error_message","boundary","win_error_message::current","wrapper stateless",
"win_error_message","boundary","win_error_message::win_error_message","constructor",
"win_error_message","boundary","win_error_message::win_error_message","constructor",
"win_error_message","boundary","win_error_message::get_error_code","get collaborator",
"win_error_message","boundary","win_error_message::get_message","get non-void-command collaborator",
"win_error_message","boundary","win_error_message::operatorwstring","unclassified",
"win_handle","boundary","win_handle::is_valid","collaborator incidental",
"win_handle","boundary","win_handle::win_handle","constructor",
"win_handle","boundary","win_handle::win_handle","constructor",
"win_handle","boundary","win_handle::~win_handle","destructor",
"win_handle","boundary","win_handle::operatorHANDLE","get",
"win_handle","boundary","win_handle::is_valid","predicate wrapper",
"win_handle","boundary","win_handle::operator=","property set collaborator",
"win_handle","boundary","win_handle::win_handle","copy-constructor",
"win_handle","boundary","win_handle::operator=","property set",
