Class Name,Class Stereotype,Method Name,Method Stereotype
"UwpSpecs","pure-controller degenerate small-class","Determining_caller_identity_should_not_throw_for_native_programs","controller stateless",
"XmlNodeFormatterSpecs","pure-controller degenerate small-class","When_a_node_is_20_chars_long_it_should_not_be_trimmed","controller stateless",
"XmlNodeFormatterSpecs","pure-controller degenerate small-class","When_a_node_is_longer_then_20_chars_it_should_be_trimmed","controller stateless",
"XAttributeFormatterSpecs","pure-controller degenerate small-class","When_formatting_an_attribute_it_should_return_the_name_and_value","controller stateless",
"ClassToExploreUnwrappedEnumerableTypes","boundary degenerate","DoWithTask","collaborator incidental",
"ClassToExploreUnwrappedEnumerableTypes","boundary degenerate","DoWithIntTask","incidental",
"ClassToExploreUnwrappedEnumerableTypes","boundary degenerate","DoWithBoolValueTask","collaborator incidental",
"ClassWithSomeNonInheritableAttribute","degenerate small-class","Method1","empty",
"ClassWithSomeAttribute","degenerate small-class","Method1","empty",
"MyStructWithFakeCompilerGeneratedEqualityAndPrintMembers","controller small-class","PrintMembers","predicate controller",
"TypeExtensionsSpecs","degenerate","When_comparing_types_and_types_are_same_it_should_return_true","controller stateless",
"TypeExtensionsSpecs","degenerate","When_comparing_types_and_first_type_inherits_second_it_should_return_true","controller stateless",
"TypeExtensionsSpecs","degenerate","When_comparing_types_and_second_type_inherits_first_it_should_return_false","controller stateless",
"TypeExtensionsSpecs","degenerate","When_comparing_types_and_types_are_different_it_should_return_false","controller stateless",
"TypeExtensionsSpecs","degenerate","When_getting_explicit_conversion_operator_from_a_type_with_fake_conversion_operators_it_should_not_return_any","controller stateless",
"TypeExtensionsSpecs","degenerate","When_getting_implicit_conversion_operator_from_a_type_with_fake_conversion_operators_it_should_not_return_any","controller stateless",
"TypeExtensionsSpecs","degenerate","When_getting_fake_explicit_conversion_operator_from_a_type_with_fake_conversion_operators_it_should_return_one","controller stateless",
"TypeExtensionsSpecs","degenerate","When_getting_fake_implicit_conversion_operator_from_a_type_with_fake_conversion_operators_it_should_return_one","controller stateless",
"TypeExtensionsSpecs","degenerate","IsRecord_should_detect_records_correctly","controller stateless",
"TypeExtensionsSpecs","degenerate","Records_and_tuples_are_detected_correctly","controller stateless",
"TypeExtensionsSpecs","degenerate","Anonymous_types_are_detected_correctly","controller stateless",
"TypeExtensionsSpecs","degenerate","When_checking_if_anonymous_type_is_record_it_should_return_false","wrapper stateless",
"TypeExtensionsSpecs","degenerate","When_checking_if_value_tuple_is_record_it_should_return_false","wrapper stateless",
"TypeExtensionsSpecs","degenerate","When_checking_if_class_with_multiple_equality_methods_is_record_it_should_return_false","wrapper stateless",
"TypeWithConversionOperators","empty","TypeWithConversionOperators","constructor",
"ClassExplicitlyImplementingInterface","degenerate","ImplicitMethod","empty",
"ClassExplicitlyImplementingInterface","degenerate","ImplicitMethod","empty",
"ClassExplicitlyImplementingInterface","degenerate","IExplicitInterface.ExplicitMethod","empty",
"ClassExplicitlyImplementingInterface","degenerate","IExplicitInterface.ExplicitMethod","empty",
"ClassExplicitlyImplementingInterface","degenerate","ExplicitImplicitMethod","empty",
"ClassExplicitlyImplementingInterface","degenerate","ExplicitImplicitMethod","empty",
"ClassExplicitlyImplementingInterface","degenerate","IExplicitInterface.ExplicitImplicitMethod","empty",
"ClassExplicitlyImplementingInterface","degenerate","IExplicitInterface.ExplicitImplicitMethod","empty",
"ClassExplicitlyImplementingInterface","degenerate","set","empty",
"ClassExplicitlyImplementingInterface","degenerate","set","empty",
"DummyClassAttribute","empty","DummyClassAttribute","constructor",
"DummyPropertyNonInheritableAttributeAttribute","empty","DummyPropertyNonInheritableAttributeAttribute","constructor",
"DummyPropertyNonInheritableAttributeAttribute","empty","DummyPropertyNonInheritableAttributeAttribute","constructor",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_property_info_selector_is_created_with_a_null_type_it_should_throw","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_property_info_selector_is_created_with_a_null_type_list_it_should_throw","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_property_info_selector_is_null_then_should_should_throw","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_from_types_in_an_assembly_it_should_return_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_that_are_public_or_internal_it_should_return_only_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_that_are_abstract_it_should_return_only_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_that_are_not_abstract_it_should_return_only_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_that_are_static_it_should_return_only_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_that_are_not_static_it_should_return_only_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_that_are_virtual_it_should_return_only_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_that_are_not_virtual_it_should_return_only_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_decorated_with_specific_attribute_it_should_return_only_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_not_decorated_with_specific_attribute_it_should_return_only_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_return_a_specific_type_it_should_return_only_the_applicable_methods","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_do_not_return_a_specific_type_it_should_return_only_the_applicable_methods","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_decorated_with_an_inheritable_attribute_it_should_only_return_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_decorated_with_or_inheriting_an_inheritable_attribute_it_should_only_return_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_not_decorated_with_an_inheritable_attribute_it_should_only_return_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_not_decorated_with_or_inheriting_an_inheritable_attribute_it_should_only_return_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_decorated_with_a_noninheritable_attribute_it_should_only_return_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_decorated_with_or_inheriting_a_noninheritable_attribute_it_should_only_return_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_not_decorated_with_a_noninheritable_attribute_it_should_only_return_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_not_decorated_with_or_inheriting_a_noninheritable_attribute_it_should_only_return_the_applicable_properties","controller stateless",
"PropertyInfoSelectorSpecs","pure-controller degenerate","When_selecting_properties_return_types_it_should_return_the_correct_types","controller stateless",
"ClassWithWritableProperties","degenerate small-class","set","empty",
"ClassWithWritableProperties","degenerate small-class","set","empty",
"XDocumentFormatterSpecs","pure-controller degenerate small-class","When_element_has_root_element_it_should_include_it_in_the_output","controller stateless",
"XDocumentFormatterSpecs","pure-controller degenerate small-class","When_element_has_no_root_element_it_should_include_it_in_the_output","controller stateless",
"ClassWithAllPropertiesVirtual","degenerate small-class","set","empty",
"TestClassForMethodSelectorWithAbstractAndVirtualMethods","degenerate","PublicVirtualMethod","empty",
"TestClassForMethodSelectorWithAbstractAndVirtualMethods","degenerate","ProptectedVirtualMethod","empty",
"TestClassForMethodSelectorWithAbstractAndVirtualMethods","degenerate","InternalVirtualMethod","empty",
"TestClassForMethodSelectorWithAbstractAndVirtualMethods","degenerate","PublicNotAbstractMethod","empty",
"TestClassForMethodSelectorWithAbstractAndVirtualMethods","degenerate","ProtectedNotAbstractMethod","empty",
"TestClassForMethodSelectorWithAbstractAndVirtualMethods","degenerate","InternalNotAbstractMethod","empty",
"TestClassForMethodSelectorWithAbstractAndVirtualMethods","degenerate","PrivateAbstractMethod","empty",
"TestClassForMethodReturnTypesSelector","degenerate","SomeMethod","empty",
"TestClassForMethodReturnTypesSelector","degenerate","AnotherMethod","incidental",
"TestClassForMethodReturnTypesSelector","degenerate","OneMoreMethod","incidental",
"TestClassForMethodSelectorWithInheritableAttributeDerived","degenerate small-class","PublicVirtualVoidMethodWithAttribute","empty",
"TestClassForMethodSelectorWithInheritableAttribute","degenerate small-class","PublicVirtualVoidMethodWithAttribute","empty",
"ClassWithNonPublicMethods","degenerate","PublicDoNothing","empty",
"ClassWithNonPublicMethods","degenerate","DoNothingWithParameter","empty",
"ClassWithNonPublicMethods","degenerate","DoNothingWithAnotherParameter","empty",
"ClassWithNonAsyncMethods","boundary degenerate","PublicDoNothing","collaborator incidental",
"ClassWithNonAsyncMethods","boundary degenerate","InternalDoNothing","collaborator incidental",
"ClassWithNonAsyncMethods","boundary degenerate","ProtectedDoNothing","collaborator incidental",
"ClassWithAllMethodsAsync","boundary degenerate","PublicAsyncDoNothing","wrapper stateless",
"ClassWithAllMethodsAsync","boundary degenerate","InternalAsyncDoNothing","wrapper stateless",
"ClassWithAllMethodsAsync","boundary degenerate","ProtectedAsyncDoNothing","wrapper stateless",
"ClassWithMethodsThatAreNotDecoratedWithDummyAttribute","degenerate","PublicDoNothing","empty",
"ClassWithMethodsThatAreNotDecoratedWithDummyAttribute","degenerate","ProtectedDoNothing","empty",
"ClassWithMethodsThatAreNotDecoratedWithDummyAttribute","degenerate","PrivateDoNothing","empty",
"ClassWithAllMethodsDecoratedWithDummyAttribute","degenerate","PublicDoNothing","empty",
"ClassWithAllMethodsDecoratedWithDummyAttribute","degenerate","PublicDoNothingWithSameAttributeTwice","empty",
"ClassWithAllMethodsDecoratedWithDummyAttribute","degenerate","ProtectedDoNothing","empty",
"ClassWithAllMethodsDecoratedWithDummyAttribute","degenerate","PrivateDoNothing","empty",
"ClassWithNonVirtualPublicMethods","degenerate","PublicDoNothing","empty",
"ClassWithNonVirtualPublicMethods","degenerate","InternalDoNothing","empty",
"ClassWithNonVirtualPublicMethods","degenerate","ProtectedDoNothing","empty",
"ClassWithAllMethodsVirtual","degenerate","PublicVirtualDoNothing","empty",
"ClassWithAllMethodsVirtual","degenerate","InternalVirtualDoNothing","empty",
"ClassWithAllMethodsVirtual","degenerate","ProtectedVirtualDoNothing","empty",
"TestClass","degenerate","VoidMethod","empty",
"TestClass","degenerate","IntMethod","incidental",
"TestClass","degenerate","PrivateMethod","empty",
"TestClass","degenerate","InternalMethod","incidental",
"TestClass","degenerate","ProtectedInternalMethod","empty",
"TestClass","degenerate","PrivateProtectedMethod","empty",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_types_that_decorated_with_attribute_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_types_that_decorated_with_attribute_or_inherit_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_types_that_not_decorated_with_attribute_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_types_that_not_decorated_with_attribute_or_inherit_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_types_in_namespace_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_types_under_namespace_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_derived_classes_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_types_that_implement_interface_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_only_the_classes_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_not_a_classes_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_static_classes_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_not_a_static_classes_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_selecting_types_with_predicate_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_unwrap_task_types_it_should_return_the_correct_type","controller stateless",
"TypeEnumerableExtensionsSpecs","pure-controller degenerate","When_unwrap_enumerable_types_it_should_return_the_correct_type","controller stateless",
"TestTimer","degenerate small-class","TestTimer","constructor",
"TestTimer","degenerate small-class","Dispose","empty",
"NotHaveLength","pure-controller degenerate","When_a_stream_does_not_have_an_unexpected_length_it_should_succeed","controller stateless",
"NotHaveLength","pure-controller degenerate","When_a_stream_does_have_the_unexpected_length_it_should_fail","controller stateless",
"NotHaveLength","pure-controller degenerate","When_null_not_have_length_should_fail","controller stateless",
"NotHaveLength","pure-controller degenerate","When_a_throwing_stream_should_not_have_a_length_it_should_fail","controller stateless",
"ThrowExactlyAsync","pure-controller degenerate small-class","Does_not_continue_assertion_on_exact_exception_type","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_subject_is_null_it_should_throw","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_subject_is_null_in_assertion_scope_it_should_throw","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_task_throws_fast_it_should_succeed","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_task_throws_slow_it_should_fail","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_task_throws_asynchronous_it_should_succeed","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_task_not_completes_it_should_fail","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_task_completes_without_exception_it_should_fail","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_task_throws_unexpected_exception_it_should_fail","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_task_throws_unexpected_exception_asynchronous_it_should_fail","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_task_is_canceled_before_timeout_it_succeeds","controller stateless",
"ThrowWithinAsync","pure-controller degenerate","When_task_is_canceled_after_timeout_it_fails","controller stateless",
"ThrowAsync","pure-controller degenerate","When_subject_is_null_it_should_throw","controller stateless",
"ThrowAsync","pure-controller degenerate","When_subject_is_null_in_assertion_scope_it_should_throw","controller stateless",
"ThrowAsync","pure-controller degenerate","When_task_throws_it_should_succeed","controller stateless",
"ThrowAsync","pure-controller degenerate","When_task_throws_unexpected_exception_it_should_fail","controller stateless",
"ThrowAsync","pure-controller degenerate","When_task_completes_without_exception_it_should_fail","controller stateless",
"NotCompleteWithinAsync","pure-controller degenerate","When_subject_is_null_it_should_throw","controller stateless",
"NotCompleteWithinAsync","pure-controller degenerate","When_task_completes_fast_it_should_throw","controller stateless",
"NotCompleteWithinAsync","pure-controller degenerate","When_task_consumes_time_in_sync_portion_it_should_succeed","controller stateless",
"ExecutingTime","pure-controller degenerate","When_action_runs_inside_execution_time_exceptions_are_captured_and_rethrown","controller stateless",
"ExecutingTime","pure-controller degenerate","Stopwatch_is_not_stopped_after_first_execution_time_assertion","controller stateless",
"ExecutingTime","pure-controller degenerate","When_asserting_on_null_execution_it_should_throw","controller stateless",
"ExecutingTime","pure-controller degenerate","When_asserting_on_null_action_it_should_throw","controller stateless",
"ExecutingTime","pure-controller degenerate","When_asserting_on_null_func_it_should_throw","controller stateless",
"ExecutingTime","pure-controller degenerate","When_asserting_execution_time_of_null_action_it_should_throw","controller stateless",
"ExecutingTime","pure-controller degenerate","When_asserting_execution_time_of_null_it_should_throw","controller stateless",
"ExecutingTime","pure-controller degenerate","When_accidentally_using_equals_it_should_throw_a_helpful_error","controller stateless",
"AggregateExceptionAssertionSpecs","pure-controller degenerate","When_the_expected_exception_is_wrapped_it_should_succeed","controller stateless",
"AggregateExceptionAssertionSpecs","pure-controller degenerate","When_the_expected_exception_was_not_thrown_it_should_report_the_actual_exceptions","controller stateless",
"AggregateExceptionAssertionSpecs","pure-controller degenerate","When_no_exception_was_expected_it_should_report_the_actual_exceptions","controller stateless",
"XElementFormatterSpecs","pure-controller degenerate small-class","When_element_has_attributes_it_should_include_them_in_the_output","controller stateless",
"XElementFormatterSpecs","pure-controller degenerate small-class","When_element_has_child_element_it_should_not_include_them_in_the_output","controller stateless",
"ActionAssertionSpecs","pure-controller degenerate small-class","Null_clock_throws_exception","controller stateless",
"TimeOnlyAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_timeonly_value_with_value_to_have_a_value","controller stateless",
"TimeOnlyAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_timeonly_value_with_value_to_not_be_null","controller stateless",
"TimeOnlyAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_timeonly_value_with_null_to_be_null","controller stateless",
"TimeOnlyAssertionSpecs","pure-controller degenerate","Should_support_chaining_constraints_with_and","controller stateless",
"TimeOnlyAssertionSpecs","pure-controller degenerate","Should_throw_a_helpful_error_when_accidentally_using_equals","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_the_Turkish_letter_i_it_should_differ_by_dottedness","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_the_same_digit_from_different_cultures_they_should_be_equal","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_equivalency_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_equality_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_having_prefix_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_not_having_prefix_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_having_equivalent_prefix_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_not_having_equivalent_prefix_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_having_suffix_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_not_having_suffix_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_having_equivalent_suffix_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_not_having_equivalent_suffix_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_containing_equivalent_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_not_containing_equivalent_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_containing_equal_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_containing_all_equals_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_containing_any_equals_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_containing_one_equal_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_containing_one_equivalent_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_not_containing_equal_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_not_containing_all_equals_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_comparing_strings_for_not_containing_any_equals_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_formatting_reason_arguments_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_stringifying_an_object_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_stringifying_a_validation_context_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","When_formatting_the_context_it_should_ignore_culture","controller stateless",
"StringComparisonSpecs","degenerate","Matching_strings_for_equivalence_ignores_the_culture","controller stateless",
"StringComparisonSpecs","degenerate","Culture_is_ignored_when_sorting_strings","wrapper stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_positive_value_to_be_positive_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_negative_value_to_be_positive_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_zero_value_to_be_positive_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_null_value_to_be_positive_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_negative_value_to_be_positive_it_should_fail_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_negative_value_to_be_negative_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_positive_value_to_be_negative_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_zero_value_to_be_negative_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_null_value_to_be_negative_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_positive_value_to_be_negative_it_should_fail_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_equal_to_same_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_equal_to_different_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","A_null_is_not_equal_to_another_value","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_null_value_to_be_equal_to_different_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_equal_to_different_value_it_should_fail_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_not_equal_to_different_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_null_value_to_be_not_equal_to_different_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_not_equal_to_the_same_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_not_equal_to_the_same_value_it_should_fail_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_greater_than_smaller_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_greater_than_greater_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_null_value_to_be_greater_than_other_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_greater_than_same_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_greater_than_greater_value_it_should_fail_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_greater_than_or_equal_to_smaller_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_null_value_to_be_greater_than_or_equal_to_other_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_greater_than_or_equal_to_same_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","Chaining_after_one_assertion_1","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_greater_than_or_equal_to_greater_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_greater_than_or_equal_to_greater_value_it_should_fail_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_less_than_greater_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_less_than_smaller_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_null_value_to_be_less_than_other_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_less_than_same_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_less_than_smaller_value_it_should_fail_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_less_than_or_equal_to_greater_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","Chaining_after_one_assertion_2","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_null_value_to_be_less_than_or_equal_to_other_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_less_than_or_equal_to_same_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_less_than_or_equal_to_smaller_value_it_should_fail","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_value_to_be_less_than_or_equal_to_smaller_value_it_should_fail_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_accidentally_using_equals_it_should_throw_a_helpful_error","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_that_time_is_close_to_a_negative_precision_it_should_throw","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_time_is_less_then_but_close_to_another_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_time_is_greater_then_but_close_to_another_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_time_is_less_then_and_not_close_to_another_value_it_should_throw_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_time_is_greater_then_and_not_close_to_another_value_it_should_throw_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_time_is_within_specified_number_of_milliseconds_from_another_value_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_a_null_time_is_asserted_to_be_close_to_another_it_should_throw","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_time_away_from_another_value_it_should_throw_with_descriptive_message","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_that_time_is_not_close_to_a_negative_precision_it_should_throw","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_subject_time_is_not_close_to_a_later_time_it_should_throw","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_subject_time_is_not_close_to_an_earlier_time_it_should_throw","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_subject_time_is_not_close_to_an_earlier_time_by_a_20ms_timespan_it_should_throw","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_subject_time_is_not_close_to_another_value_that_is_later_by_more_than_20ms_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_subject_time_is_not_close_to_another_value_that_is_earlier_by_more_than_20ms_it_should_succeed","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_subject_time_is_not_close_to_an_earlier_time_by_35ms_it_should_throw","controller stateless",
"SimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_subject_null_time_is_not_close_to_another_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_the_same_objects_are_expected_to_be_the_same_it_should_not_fail","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_two_different_objects_are_expected_to_be_the_same_it_should_fail_with_a_clear_explanation","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_a_derived_class_has_longer_formatting_than_the_base_class","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_two_different_objects_are_expected_not_to_be_the_same_it_should_not_fail","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_two_equal_object_are_expected_not_to_be_the_same_it_should_fail","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_of_the_expected_type_it_should_not_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_of_the_expected_open_generic_type_it_should_not_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_not_of_the_expected_open_generic_type_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_null_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_not_of_the_expected_type_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_an_assertion_fails_on_BeOfType_succeeding_message_should_be_included","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_of_the_unexpected_type_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_of_the_unexpected_generic_type_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_of_the_unexpected_open_generic_type_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_not_of_the_expected_type_it_should_not_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_not_of_the_unexpected_open_generic_type_it_should_not_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_generic_object_is_not_of_the_unexpected_type_it_should_not_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_non_generic_object_is_not_of_the_unexpected_open_generic_type_it_should_not_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_asserting_object_is_not_of_type_and_it_is_null_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_satisfies_predicate_it_should_not_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_typed_object_satisfies_predicate_it_should_not_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_does_not_match_the_predicate_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_a_typed_object_does_not_match_the_predicate_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_object_is_matched_against_a_null_it_should_throw","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_an_assertion_on_two_objects_fails_it_should_show_the_properties_of_the_class","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_an_assertion_on_two_objects_fails_and_they_implement_tostring_it_should_show_their_string_representation","controller stateless",
"ReferenceTypeAssertionsSpecs","pure-controller degenerate","When_an_assertion_on_two_unknown_objects_fails_it_should_report_the_type_name","controller stateless",
"BeWriteOnly","pure-controller degenerate","When_having_a_writeonly_stream_be_write_only_should_succeed","controller stateless",
"BeWriteOnly","pure-controller degenerate","When_having_a_readable_stream_be_write_only_should_fail","controller stateless",
"BeWriteOnly","pure-controller degenerate","When_having_a_non_writable_stream_be_write_only_should_fail","controller stateless",
"BeWriteOnly","pure-controller degenerate","When_null_be_write_only_should_fail","controller stateless",
"SomeClassAssertions","empty","SomeClassAssertions","constructor",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_guid_value_with_a_value_to_have_a_value","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_guid_value_with_a_value_to_not_be_null","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_fail_when_asserting_nullable_guid_value_without_a_value_to_have_a_value","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_fail_when_asserting_nullable_guid_value_without_a_value_to_not_be_null","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_nullable_guid_value_without_a_value_to_have_a_value","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_nullable_guid_value_without_a_value_to_not_be_null","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_guid_value_without_a_value_to_not_have_a_value","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_guid_value_without_a_value_to_be_null","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_fail_when_asserting_nullable_guid_value_with_a_value_to_not_have_a_value","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_fail_when_asserting_nullable_guid_value_with_a_value_to_be_null","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_fail_when_guid_is_null_while_asserting_guid_equals_another_guid","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_guid_null_equals_null","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_nullable_guid_value_with_a_value_to_not_have_a_value","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_nullable_guid_value_with_a_value_to_be_null","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_fail_when_asserting_null_equals_some_guid","controller stateless",
"NullableGuidAssertionSpecs","pure-controller degenerate","Should_support_chaining_constraints_with_and","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_succeed_when_status_code_is_successful","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_status_code_error_is_successful","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_success_but_response_is_null","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_succeed_when_status_code_is_redirect","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_status_code_error_is_redirection","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_redirect_but_response_is_null","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_succeed_when_status_code_is_client_error","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_status_code_success_is_client_error","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_client_error_but_response_is_null","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_succeed_when_status_code_is_server_error","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_status_code_success_is_server_error","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_server_error_but_response_is_null","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_succeed_when_status_code_is_error","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_status_code_success_is_error","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_error_but_response_is_null","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_succeed_when_status_code_to_be_equal_to_the_same_value","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_status_code_value_to_be_equal_to_a_different_value","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_certain_status_code_but_response_is_null","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_succeed_when_status_code_value_not_to_be_equal_to_the_same_value","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_status_code_value_not_to_be_equal_to_a_different_value","controller stateless",
"HttpResponseMessageAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_against_certain_status_code_but_response_is_null","controller stateless",
"NotBeReadOnly","pure-controller degenerate","When_having_a_non_readable_stream_be_not_read_only_should_succeed","controller stateless",
"NotBeReadOnly","pure-controller degenerate","When_having_a_writable_stream_be_not_read_only_should_succeed","controller stateless",
"NotBeReadOnly","pure-controller degenerate","When_having_a_readonly_stream_be_not_read_only_should_fail","controller stateless",
"NotBeReadOnly","pure-controller degenerate","When_null_not_be_read_only_should_fail","controller stateless",
"ClassWithCustomEqualMethod","data-provider","ClassWithCustomEqualMethod","constructor",
"ClassWithCustomEqualMethod","data-provider","Equals","predicate wrapper",
"ClassWithCustomEqualMethod","data-provider","Equals","predicate non-void-command collaborator",
"ClassWithCustomEqualMethod","data-provider","GetHashCode","get",
"ClassWithCustomEqualMethod","data-provider","ToString","incidental",
"DateOnlyAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_dateonly_value_with_value_to_have_a_value","controller stateless",
"DateOnlyAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_dateonly_value_with_value_to_not_be_null","controller stateless",
"DateOnlyAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_dateonly_value_with_null_to_be_null","controller stateless",
"DateOnlyAssertionSpecs","pure-controller degenerate","Should_support_chaining_constraints_with_and","controller stateless",
"DateOnlyAssertionSpecs","pure-controller degenerate","Should_throw_a_helpful_error_when_accidentally_using_equals","controller stateless",
"AnotherCustomerDto","empty","AnotherCustomerDto","constructor",
"ComparableOfInt","small-class","ComparableOfInt","constructor",
"ComparableOfInt","small-class","CompareTo","property non-void-command",
"ComparableOfInt","small-class","ToString","property non-void-command",
"ClassWithMethodWithImplementationAttribute","degenerate","ClassWithMethodWithImplementationAttribute","constructor",
"ClassWithMethodWithImplementationAttribute","degenerate","ClassWithMethodWithImplementationAttribute","constructor",
"ClassWithMethodWithImplementationAttribute","degenerate","DoNotInlineMe","empty",
"ClassWithMethodWithImplementationAttribute","degenerate","NoOptions","empty",
"ClassWithMethodWithImplementationAttribute","degenerate","ZeroOptions","empty",
"EquatableOfInt","unclassified","EquatableOfInt","constructor",
"EquatableOfInt","unclassified","Equals","predicate collaborator",
"EquatableOfInt","unclassified","GetHashCode","property non-void-command",
"EquatableOfInt","unclassified","ToString","property non-void-command",
"FormatterSpecs","pure-controller degenerate","When_value_contains_cyclic_reference_it_should_create_descriptive_error_message","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_same_object_appears_twice_in_the_graph_at_different_paths","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_subject_or_expectation_contains_reserved_symbols_it_should_escape_then","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_a_timespan_is_one_tick_it_should_be_formatted_as_positive","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_a_timespan_is_minus_one_tick_it_should_be_formatted_as_negative","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_a_datetime_is_very_close_to_the_edges_of_a_datetimeoffset_it_should_not_crash","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_minimum_value_of_a_datetime_is_provided_it_should_return_a_clear_representation","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_maximum_value_of_a_datetime_is_provided_it_should_return_a_clear_representation","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_a_property_throws_an_exception_it_should_ignore_that_and_still_create_a_descriptive_error_message","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_an_exception_contains_an_inner_exception_they_should_both_appear_in_the_error_message","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_object_is_a_generic_type_without_custom_string_representation_it_should_show_the_properties","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_object_is_a_user_defined_type_it_should_show_the_name_on_the_initial_line","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_object_is_an_anonymous_type_it_should_show_the_properties_recursively","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_object_is_a_list_of_anonymous_type_it_should_show_the_properties_recursively_with_newlines_and_indentation","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_object_is_an_empty_anonymous_type_it_should_show_braces_on_the_same_line","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_object_is_a_tuple_it_should_show_the_properties_recursively","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_object_is_a_record_it_should_show_the_properties_recursively","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_to_string_override_throws_it_should_use_the_default_behavior","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_maximum_recursion_depth_is_met_it_should_give_a_descriptive_message","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_the_maximum_recursion_depth_is_never_reached_it_should_render_the_entire_graph","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_a_collection_exceeds_the_max_line_count_it_should_cut_off_the_result","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_a_byte_array_it_should_limit_the_items","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_with_default_behavior_it_should_include_non_private_fields","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_unsigned_integer_it_should_have_c_sharp_postfix","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_long_integer_it_should_have_c_sharp_postfix","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_unsigned_long_integer_it_should_have_c_sharp_postfix","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_short_integer_it_should_have_f_sharp_postfix","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_unsigned_short_integer_it_should_have_f_sharp_postfix","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_byte_it_should_use_hexadecimal_notation","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_signed_byte_it_should_have_f_sharp_postfix","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_single_it_should_have_c_sharp_postfix","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_single_positive_infinity_it_should_be_property_reference","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_single_negative_infinity_it_should_be_property_reference","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_single_it_should_have_max_precision","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_single_not_a_number_it_should_just_say_nan","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_double_integer_it_should_have_decimal_point","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_double_with_big_exponent_it_should_have_exponent","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_double_positive_infinity_it_should_be_property_reference","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_double_negative_infinity_it_should_be_property_reference","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_double_not_a_number_it_should_just_say_nan","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_double_it_should_have_max_precision","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_decimal_it_should_have_c_sharp_postfix","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_a_pending_task_it_should_return_the_task_status","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_a_completion_source_it_should_include_the_underlying_task","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_a_dictionary_it_should_format_keys_and_values","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_an_empty_dictionary_it_should_be_clear_from_the_message","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_a_large_dictionary_it_should_limit_the_number_of_formatted_entries","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatting_multiple_items_with_a_custom_string_representation_using_line_breaks_it_should_end_lines_with_a_comma","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_a_custom_formatter_exists_in_any_loaded_assembly_it_should_override_the_default_formatters","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_a_base_class_has_a_custom_formatter_it_should_override_the_default_formatters","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_there_are_multiple_custom_formatters_it_should_select_a_more_specific_one","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_a_base_class_has_multiple_custom_formatters_it_should_work_the_same_as_for_the_base_class","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_no_custom_formatter_exists_in_the_specified_assembly_it_should_use_the_default","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_formatter_scanning_is_disabled_it_should_use_the_default_formatters","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_no_formatter_scanning_is_configured_it_should_use_the_default_formatters","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_defining_a_custom_value_formatter_it_should_respect_the_overrides","controller stateless",
"FormatterSpecs","pure-controller degenerate","When_defining_a_custom_enumerable_value_formatter_it_should_respect_the_overrides","controller stateless",
"DateTimeOffsetValueFormatterSpecs","pure-controller degenerate","When_time_is_not_relevant_it_should_not_be_included_in_the_output","controller stateless",
"DateTimeOffsetValueFormatterSpecs","pure-controller degenerate","When_the_offset_is_not_relevant_it_should_not_be_included_in_the_output","controller stateless",
"DateTimeOffsetValueFormatterSpecs","pure-controller degenerate","When_the_offset_is_negative_it_should_include_it_in_the_output","controller stateless",
"DateTimeOffsetValueFormatterSpecs","pure-controller degenerate","When_the_offset_is_positive_it_should_include_it_in_the_output","controller stateless",
"DateTimeOffsetValueFormatterSpecs","pure-controller degenerate","When_date_is_not_relevant_it_should_not_be_included_in_the_output","controller stateless",
"DateTimeOffsetValueFormatterSpecs","pure-controller degenerate","When_date_is_relevant_it_should_be_included_in_the_output","controller stateless",
"DateTimeOffsetValueFormatterSpecs","pure-controller degenerate","When_a_full_date_and_time_is_specified_all_parts_should_be_included_in_the_output","controller stateless",
"DateTimeOffsetValueFormatterSpecs","pure-controller degenerate","When_datetime_components_are_not_relevant_they_should_not_be_included_in_the_output","controller stateless",
"DateTimeOffsetValueFormatterSpecs","pure-controller degenerate","When_datetimeoffset_components_are_not_relevant_they_should_not_be_included_in_the_output","controller stateless",
"FakeClock","commander boundary","IClock.DelayAsync","get set collaborator",
"FakeClock","commander boundary","Delay","set collaborator",
"FakeClock","commander boundary","Complete","command",
"FakeClock","commander boundary","CompleteAfter","command collaborator",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_days_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_days_from_a_double_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_hours_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_hours_from_a_double_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_minutes_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_minutes_from_a_double_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_seconds_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_seconds_from_a_double_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","Add_time_span_to_given_seconds","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","Subtract_time_span_from_given_seconds","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_nanoseconds_component_it_should_return_the_correct_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_nanoseconds_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_nanoseconds_from_a_long_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_total_number_of_nanoseconds_should_return_the_correct_double_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_microseconds_component_it_should_return_the_correct_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_microseconds_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_microseconds_from_a_long_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_total_number_of_microseconds_should_return_the_correct_double_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_milliseconds_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_milliseconds_from_a_double_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_ticks_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_getting_the_number_of_ticks_from_a_long_it_should_return_the_correct_time_span_value","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_combining_fluent_time_methods_it_should_return_the_correct_time_span_value","wrapper stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_specifying_a_time_before_another_time_it_should_return_the_correct_time","controller stateless",
"TimeSpanConversionExtensionSpecs","degenerate","When_specifying_a_time_after_another_time_it_should_return_the_correct_time","controller stateless",
"ObjectExtensionsSpecs","pure-controller degenerate small-class","When_comparing_non_equivalent_boxed_numerics_it_should_fail","controller stateless",
"NullableDoubleAssertions","pure-controller degenerate small-class","NullableDoubleAssertions","constructor",
"NullableDoubleAssertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"NullableByteAssertions","pure-controller degenerate small-class","NullableByteAssertions","constructor",
"NullableByteAssertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"AssertionRuleEquivalencyStep<TSubject>","unclassified","AssertionRuleEquivalencyStep","constructor",
"AssertionRuleEquivalencyStep<TSubject>","unclassified","Handle","property non-void-command collaborator",
"AssertionRuleEquivalencyStep<TSubject>","unclassified","ExecuteAssertion","controller stateless",
"AssertionRuleEquivalencyStep<TSubject>","unclassified","ToString","property",
"NullThrowingToStringImplementation","degenerate small-class","NullThrowingToStringImplementation","constructor",
"NullThrowingToStringImplementation","degenerate small-class","ToString","incidental",
"ComparableTypeAssertions<T>","empty","ComparableTypeAssertions","constructor",
"FormattedObjectGraph","commander","FormattedObjectGraph","constructor",
"FormattedObjectGraph","commander","AddFragmentOnNewLine","command",
"FormattedObjectGraph","commander","AddLine","command",
"FormattedObjectGraph","commander","AddFragment","command",
"FormattedObjectGraph","commander","EnsureInitialNewLine","command",
"FormattedObjectGraph","commander","InsertInitialNewLine","set",
"FormattedObjectGraph","commander","FlushCurrentLine","command",
"FormattedObjectGraph","commander","AppendSafely","command",
"FormattedObjectGraph","commander","WithIndentation","property set factory collaborator",
"FormattedObjectGraph","commander","ToString","property non-void-command",
"FormattedObjectGraph","commander","KeepOnSingleLineAsLongAsPossible","property factory collaborator",
"FormattedObjectGraph","commander","AddStartingLineOrFragment","non-void-command collaborator",
"FormattedObjectGraph","commander","InsertAtStartOfLine","set collaborator",
"FormattedObjectGraph","commander","InsertLineOrFragment","non-void-command collaborator",
"FormattedObjectGraph","commander","InsertNewLineIntoFragment","property wrapper",
"FormattedObjectGraph","commander","AddLineOrFragment","non-void-command collaborator",
"FormattedObjectGraph","commander","AddEndingLineOrFragment","non-void-command collaborator",
"Option<T>","empty","Option","constructor",
"TimeSpanValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"TimeSpanValueFormatter","degenerate small-class","Format","controller stateless",
"TimeOnlyValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"TimeOnlyValueFormatter","degenerate small-class","Format","controller stateless",
"SingleValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"SingleValueFormatter","degenerate small-class","Format","controller stateless",
"GuidAssertions<TAssertions>","entity","GuidAssertions","constructor",
"GuidAssertions<TAssertions>","entity","BeEmpty","property factory wrapper",
"GuidAssertions<TAssertions>","entity","NotBeEmpty","property factory wrapper",
"GuidAssertions<TAssertions>","entity","Be","property non-void-command collaborator",
"GuidAssertions<TAssertions>","entity","Be","property factory wrapper",
"GuidAssertions<TAssertions>","entity","NotBe","property non-void-command collaborator",
"GuidAssertions<TAssertions>","entity","NotBe","property factory wrapper",
"NullableDateTimeOffsetAssertions<TAssertions>","entity","NullableDateTimeOffsetAssertions","constructor",
"NullableDateTimeOffsetAssertions<TAssertions>","entity","HaveValue","property factory wrapper",
"NullableDateTimeOffsetAssertions<TAssertions>","entity","NotBeNull","property non-void-command collaborator",
"NullableDateTimeOffsetAssertions<TAssertions>","entity","NotHaveValue","property factory wrapper",
"NullableDateTimeOffsetAssertions<TAssertions>","entity","BeNull","property non-void-command collaborator",
"StringEqualityEquivalencyStep","pure-controller degenerate small-class","Handle","controller stateless",
"EnumAssertions<TEnum>","empty","EnumAssertions","constructor",
"Int32ValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"Int32ValueFormatter","degenerate small-class","Format","controller stateless",
"Int16ValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"Int16ValueFormatter","degenerate small-class","Format","controller stateless",
"CyclicReferencesSpecs","degenerate","Graphs_up_to_the_maximum_depth_are_supported","controller stateless",
"CyclicReferencesSpecs","degenerate","Graphs_deeper_than_the_maximum_depth_are_not_supported","controller stateless",
"CyclicReferencesSpecs","degenerate","By_default_cyclic_references_are_not_valid","controller stateless",
"CyclicReferencesSpecs","degenerate","Two_graphs_with_ignored_cyclic_references_can_be_compared","controller stateless",
"CyclicReferencesSpecs","degenerate","Nested_properties_that_are_null_are_not_treated_as_cyclic_references","controller stateless",
"CyclicReferencesSpecs","degenerate","Equivalent_value_objects_are_not_treated_as_cyclic_references","controller stateless",
"CyclicReferencesSpecs","degenerate","Cyclic_references_do_not_trigger_stack_overflows","controller stateless",
"CyclicReferencesSpecs","degenerate","Cyclic_references_can_be_ignored_in_equivalency_assertions","wrapper stateless",
"CyclicReferencesSpecs","degenerate","Allowing_infinite_recursion_is_reported_in_the_failure_message","controller stateless",
"CyclicReferencesSpecs","degenerate","Can_ignore_cyclic_references_for_inequivalency_assertions","wrapper stateless",
"CyclicReferencesSpecs","degenerate","Can_detect_cyclic_references_in_enumerables","controller stateless",
"CyclicReferencesSpecs","degenerate","Can_detect_cyclic_references_in_nested_objects_referring_to_the_root","wrapper stateless",
"CyclicReferencesSpecs","degenerate","Allow_ignoring_cyclic_references_in_value_types_compared_by_members","controller stateless",
"MaximumMatchingProblem<TValue>","empty","MaximumMatchingProblem","constructor",
"ExpressionValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"ExpressionValueFormatter","degenerate small-class","Format","controller stateless",
"AndOperatorChainExtractor","entity boundary small-class","Visit","property non-void-command collaborator",
"ExceptionValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"ExceptionValueFormatter","degenerate small-class","Format","controller stateless",
"SomeClassEqualityComparer","pure-controller degenerate small-class","Equals","controller stateless",
"EnumerableValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"EnumerableValueFormatter","degenerate small-class","Format","controller stateless",
"DoubleValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"DoubleValueFormatter","degenerate small-class","Format","controller stateless",
"XDocumentValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"XDocumentValueFormatter","degenerate small-class","Format","controller stateless",
"Element<TValue>","empty","Element","constructor",
"ComparableOfString","data-provider small-class","ComparableOfString","constructor",
"ComparableOfString","data-provider small-class","CompareTo","property wrapper",
"ComparableOfString","data-provider small-class","ToString","get",
"UInt64ValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"UInt64ValueFormatter","degenerate small-class","Format","controller stateless",
"DefaultValueFormatter","unclassified","CanHandle","collaborator incidental",
"DefaultValueFormatter","unclassified","Format","command collaborator",
"DefaultValueFormatter","unclassified","GetMembers","controller stateless",
"DefaultValueFormatter","unclassified","WriteTypeAndMemberValues","command collaborator",
"DefaultValueFormatter","unclassified","WriteTypeName","controller stateless",
"DefaultValueFormatter","unclassified","WriteTypeValue","command collaborator",
"DecimalValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"DecimalValueFormatter","degenerate small-class","Format","controller stateless",
"ThreadSafeSequenceGenerator","data-provider boundary small-class","Increment","property wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","GenericCollectionAssertions","constructor",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","AllBeAssignableTo<TExpectation>","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","AllBeAssignableTo","property factory controller",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","AllBeEquivalentTo<TExpectation>","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","AllBeEquivalentTo<TExpectation>","property wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","AllBeOfType<TExpectation>","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","AllBeOfType","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeEmpty","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeEquivalentTo<TExpectation>","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeEquivalentTo<TExpectation>","property set factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeInAscendingOrder<TSelector>","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeInAscendingOrder","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeInAscendingOrder<TSelector>","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeInAscendingOrder","property non-void-command collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeInAscendingOrder","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeInDescendingOrder<TSelector>","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeInDescendingOrder","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeInDescendingOrder<TSelector>","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeInDescendingOrder","property non-void-command collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeInDescendingOrder","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeNullOrEmpty","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","BeSubsetOf","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","Contain","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","Contain","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","Contain","property factory controller",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","ContainEquivalentOf<TExpectation>","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","ContainEquivalentOf<TExpectation>","property set factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","ContainInOrder","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","ContainInOrder","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","ContainInConsecutiveOrder","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","ContainInConsecutiveOrder","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","ContainItemsAssignableTo<TExpectation>","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","NotContainItemsAssignableTo","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","ContainSingle","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","ContainSingle","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","EndWith","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","EndWith<TExpectation>","property factory controller",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","EndWith","wrapper stateless",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","Equal","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","Equal<TExpectation>","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","Equal","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","HaveCount","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","HaveCount","property factory controller",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","HaveCountGreaterThanOrEqualTo","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","HaveCountGreaterThan","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","HaveCountLessThanOrEqualTo","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","HaveCountLessThan","property factory wrapper",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","HaveElementAt","property non-void-command factory collaborator",
"GenericCollectionAssertions<TCollection,T,TAssertions>","controller","HaveElementPreceding","wrapper",
"AggregateExceptionValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"AggregateExceptionValueFormatter","degenerate small-class","Format","controller stateless",
"TestFrameworkProviderTests","pure-controller degenerate","When_running_xunit_test_implicitly_it_should_be_detected","controller stateless",
"TestFrameworkProviderTests","pure-controller degenerate","When_running_xunit_test_explicitly_it_should_be_detected","controller stateless",
"TestFrameworkProviderTests","pure-controller degenerate","When_running_test_with_unknown_test_framework_it_should_throw","controller stateless",
"TestFrameworkProviderTests","pure-controller degenerate","When_running_test_with_late_bound_but_unavailable_test_framework_it_should_throw","controller stateless",
"XmlNodeAssertions<TSubject,TAssertions>","factory controller small-class","XmlNodeAssertions","constructor",
"XmlNodeAssertions<TSubject,TAssertions>","factory controller small-class","BeEquivalentTo","property factory controller",
"XmlNodeAssertions<TSubject,TAssertions>","factory controller small-class","NotBeEquivalentTo","property factory controller",
"ContinuedAssertionScope","entity boundary","ContinuedAssertionScope","constructor",
"ContinuedAssertionScope","entity boundary","Given<T>","property non-void-command factory collaborator",
"ContinuedAssertionScope","entity boundary","ForCondition","get property non-void-command collaborator",
"ContinuedAssertionScope","entity boundary","ForConstraint","get property non-void-command collaborator",
"ContinuedAssertionScope","entity boundary","FailWith","property non-void-command factory collaborator",
"ContinuedAssertionScope","entity boundary","FailWith","property non-void-command factory collaborator",
"ContinuedAssertionScope","entity boundary","FailWith","property non-void-command factory collaborator",
"ContinuedAssertionScope","entity boundary","FailWith","property non-void-command factory collaborator",
"ContinuedAssertionScope","entity boundary","BecauseOf","get property non-void-command collaborator",
"ContinuedAssertionScope","entity boundary","ClearExpectation","property non-void-command factory collaborator",
"ContinuedAssertionScope","entity boundary","WithExpectation","get property non-void-command collaborator",
"ContinuedAssertionScope","entity boundary","WithDefaultIdentifier","get property non-void-command collaborator",
"ContinuedAssertionScope","entity boundary","Discard","property non-void-command",
"ContinuedAssertionScope","entity boundary","Dispose","command",
"Disposable","boundary degenerate small-class","Disposable","constructor",
"Disposable","boundary degenerate small-class","Dispose","wrapper stateless",
"Continuation","factory controller small-class","Continuation","constructor",
"Continuation","factory controller small-class","get","property factory collaborator",
"AssertionScope","empty","AssertionScope","constructor",
"AssertionScope","empty","AssertionScope","constructor",
"AssertionScope","empty","AssertionScope","constructor",
"AssertionScope","empty","AssertionScope","constructor",
"NullableDecimalAssertions","pure-controller degenerate small-class","NullableDecimalAssertions","constructor",
"NullableDecimalAssertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"XAttributeValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"XAttributeValueFormatter","degenerate small-class","Format","controller stateless",
"ComparableTypeAssertions<T,TAssertions>","factory controller","ComparableTypeAssertions","constructor",
"ComparableTypeAssertions<T,TAssertions>","factory controller","Be","property factory wrapper",
"ComparableTypeAssertions<T,TAssertions>","factory controller","BeEquivalentTo<TExpectation>","wrapper stateless",
"ComparableTypeAssertions<T,TAssertions>","factory controller","BeEquivalentTo<TExpectation>","property set factory collaborator",
"ComparableTypeAssertions<T,TAssertions>","factory controller","NotBe","property factory wrapper",
"ComparableTypeAssertions<T,TAssertions>","factory controller","BeRankedEquallyTo","property non-void-command factory collaborator",
"ComparableTypeAssertions<T,TAssertions>","factory controller","NotBeRankedEquallyTo","property non-void-command factory collaborator",
"ComparableTypeAssertions<T,TAssertions>","factory controller","BeLessThan","property non-void-command factory collaborator",
"ComparableTypeAssertions<T,TAssertions>","factory controller","BeLessThanOrEqualTo","property non-void-command factory collaborator",
"ComparableTypeAssertions<T,TAssertions>","factory controller","BeGreaterThan","property non-void-command factory collaborator",
"ComparableTypeAssertions<T,TAssertions>","factory controller","BeGreaterThanOrEqualTo","property non-void-command factory collaborator",
"ComparableTypeAssertions<T,TAssertions>","factory controller","BeInRange","property non-void-command factory collaborator",
"ComparableTypeAssertions<T,TAssertions>","factory controller","NotBeInRange","property non-void-command factory collaborator",
"ComparableTypeAssertions<T,TAssertions>","factory controller","BeOneOf","wrapper stateless",
"ComparableTypeAssertions<T,TAssertions>","factory controller","BeOneOf","property factory controller",
"SleepingClass","boundary degenerate small-class","Sleep","wrapper stateless",
"AssertionScopeSpecs","degenerate","When_the_previous_assertion_succeeded_it_should_not_affect_the_next_one","wrapper stateless",
"AssertionScopeSpecs","degenerate","When_the_previous_assertion_succeeded_it_should_not_affect_the_next_one_with_arguments","controller stateless",
"AssertionScopeSpecs","degenerate","When_the_previous_assertion_succeeded_it_should_not_affect_the_next_one_with_argument_providers","controller stateless",
"AssertionScopeSpecs","degenerate","When_the_previous_assertion_succeeded_it_should_not_affect_the_next_one_with_a_fail_reason_function","controller stateless",
"AssertionScopeSpecs","degenerate","When_continuing_an_assertion_chain_the_reason_should_be_part_of_consecutive_failures","controller stateless",
"AssertionScopeSpecs","degenerate","When_continuing_an_assertion_chain_the_reason_with_arguments_should_be_part_of_consecutive_failures","controller stateless",
"AssertionScopeSpecs","degenerate","Passing_a_null_value_as_reason_does_not_fail","controller stateless",
"AssertionScopeSpecs","degenerate","When_a_given_is_used_before_an_assertion_then_the_result_should_be_available_for_evaluation","wrapper stateless",
"AssertionScopeSpecs","degenerate","Get_value_when_key_is_present","controller stateless",
"AssertionScopeSpecs","degenerate","Get_default_value_when_key_is_not_present","controller stateless",
"AssertionScopeSpecs","degenerate","Get_default_value_when_nullable_value_is_null","controller stateless",
"AssertionScopeSpecs","degenerate","Value_should_be_of_requested_type","controller stateless",
"AssertionScopeSpecs","degenerate","When_the_same_failure_is_handled_twice_or_more_it_should_still_report_it_once","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_use_the_name_of_the_scope_as_context","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_use_the_lazy_name_of_the_scope_as_context","controller stateless",
"AssertionScopeSpecs","degenerate","Nested_scopes_use_the_name_of_their_outer_scope_as_context","controller stateless",
"AssertionScopeSpecs","degenerate","The_inner_scope_is_used_when_the_outer_scope_does_not_have_a_context","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_contain_each_unique_failed_assertion_seperately","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_contain_the_same_failed_assertion_seperately_if_called_multiple_times","controller stateless",
"AssertionScopeSpecs","degenerate","Because_reason_should_keep_parentheses_in_arguments_as_literals","controller stateless",
"AssertionScopeSpecs","degenerate","Because_reason_should_ignore_undefined_arguments","controller stateless",
"AssertionScopeSpecs","degenerate","Because_reason_should_threat_parentheses_as_literals_if_no_arguments_are_defined","controller stateless",
"AssertionScopeSpecs","degenerate","Because_reason_should_inform_about_invalid_parentheses_with_a_default_message","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_keep_parentheses_in_literal_values","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_contain_literal_value_if_marked_with_double_parentheses","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_not_have_modified_carriage_return_or_line_feed_control_characters","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_not_have_modified_carriage_return_or_line_feed_control_characters_in_supplied_arguments","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_not_have_trailing_backslashes_removed_from_subject","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_not_have_trailing_backslashes_removed_from_expectation","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_have_named_placeholder_be_replaced_by_reportable_value","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_have_named_placeholders_be_replaced_by_reportable_values","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_have_reportable_values_appended_at_the_end","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_not_have_nonreportable_values_appended_at_the_end","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_have_named_placeholder_be_replaced_by_nonreportable_value","controller stateless",
"AssertionScopeSpecs","degenerate","Deferred_reportable_values_should_not_be_calculated_in_absence_of_failures","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_have_named_placeholder_be_replaced_by_defered_reportable_value","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_start_with_the_defined_expectation","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_start_with_the_defined_expectation_and_arguments","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_contain_object_as_context_if_identifier_can_not_be_resolved","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_contain_the_fallback_value_as_context_if_identifier_can_not_be_resolved","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_contain_the_default_identifier_as_context_if_identifier_can_not_be_resolved","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_contain_the_reason_as_defined","controller stateless",
"AssertionScopeSpecs","degenerate","Message_should_contain_the_reason_as_defined_with_arguments","controller stateless",
"AssertionScopeSpecs","degenerate","When_disposed_it_should_throw_any_failures","wrapper stateless",
"AssertionScopeSpecs","degenerate","When_disposed_it_should_throw_any_failures_and_properly_format_using_args","wrapper stateless",
"AssertionScopeSpecs","degenerate","When_lazy_version_is_not_disposed_it_should_not_execute_fail_reason_function","controller stateless",
"AssertionScopeSpecs","degenerate","When_lazy_version_is_disposed_it_should_throw_any_failures_and_properly_format_using_args","wrapper stateless",
"AssertionScopeSpecs","degenerate","When_multiple_scopes_are_nested_it_should_throw_all_failures_from_the_outer_scope","wrapper stateless",
"AssertionScopeSpecs","degenerate","When_a_nested_scope_is_discarded_its_failures_should_also_be_discarded","wrapper stateless",
"AssertionScopeSpecs","degenerate","When_using_AssertionScope_across_thread_boundaries_it_should_work","wrapper stateless",
"AssertionScopeSpecs","degenerate","When_custom_strategy_used_respect_its_behavior","controller stateless",
"AssertionScopeSpecs","degenerate","When_custom_strategy_is_null_it_should_throw","controller stateless",
"AssertionScopeSpecs","degenerate","When_using_a_custom_strategy_it_should_include_failure_messages_of_all_failing_assertions","controller stateless",
"AssertionScopeSpecs","degenerate","When_nested_scope_is_disposed_it_passes_reports_to_parent_scope","wrapper stateless",
"AssertionScopeSpecs","degenerate","Formatting_options_passed_to_inner_assertion_scopes","controller stateless",
"NullableInt64Assertions","pure-controller degenerate small-class","NullableInt64Assertions","constructor",
"NullableInt64Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","ReferenceTypeAssertions","constructor",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","BeNull","property factory wrapper",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","NotBeNull","property factory wrapper",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","BeSameAs","property factory wrapper",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","NotBeSameAs","property factory wrapper",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","BeOfType<T>","property non-void-command factory collaborator",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","BeOfType","property non-void-command factory collaborator",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","NotBeOfType<T>","property non-void-command factory collaborator",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","NotBeOfType","property non-void-command factory collaborator",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","BeAssignableTo<T>","property non-void-command factory collaborator",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","BeAssignableTo","property non-void-command factory collaborator",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","NotBeAssignableTo<T>","property non-void-command collaborator",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","NotBeAssignableTo","property non-void-command factory collaborator",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","Match","wrapper stateless",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","Match<T>","property factory controller",
"ReferenceTypeAssertions<TSubject,TAssertions>","factory controller","Satisfy<T>","property factory controller",
"StringAssertionSpecs","pure-controller degenerate small-class","When_chaining_multiple_assertions_it_should_assert_all_conditions","controller stateless",
"FilteredEventRecording","entity small-class","FilteredEventRecording","constructor",
"FilteredEventRecording","entity small-class","IEnumerable.GetEnumerator","property non-void-command collaborator",
"FilteredEventRecording","entity small-class","GetEnumerator","property set factory collaborator",
"NullableUInt32Assertions","pure-controller degenerate small-class","NullableUInt32Assertions","constructor",
"NullableUInt32Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"TestClassForMethodSelector","degenerate","PublicVirtualVoidMethod","empty",
"TestClassForMethodSelector","degenerate","PublicVirtualVoidMethodWithAttribute","empty",
"TestClassForMethodSelector","degenerate","InternalVirtualIntMethod","incidental",
"TestClassForMethodSelector","degenerate","ProtectedVirtualVoidMethodWithAttribute","empty",
"TestClassForMethodSelector","degenerate","PrivateVoidDoNothing","empty",
"TestClassForMethodSelector","degenerate","ProtectedVirtualStringMethod","incidental",
"TestClassForMethodSelector","degenerate","PrivateStringMethod","incidental",
"EventRecorder","entity boundary","EventRecorder","constructor",
"EventRecorder","entity boundary","Attach","void-accessor command collaborator",
"EventRecorder","entity boundary","Dispose","command collaborator",
"EventRecorder","entity boundary","RecordEvent","void-accessor command collaborator",
"EventRecorder","entity boundary","Reset","command",
"EventRecorder","entity boundary","GetEnumerator","property set factory collaborator",
"EventMonitorOptions","unclassified","IgnoringEventAccessorExceptions","get set",
"EventMonitorOptions","unclassified","RecordingEventsWithBrokenAccessor","get set",
"EventMonitorOptions","unclassified","ConfigureTimestampProvider","get set collaborator",
"ClassWithOnlyWritableProperties","degenerate small-class","set","empty",
"DateOnlyValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"DateOnlyValueFormatter","degenerate small-class","Format","controller stateless",
"NullableEnumAssertions<TEnum,TAssertions>","entity","NullableEnumAssertions","constructor",
"NullableEnumAssertions<TEnum,TAssertions>","entity","HaveValue","property non-void-command factory collaborator",
"NullableEnumAssertions<TEnum,TAssertions>","entity","NotBeNull","property non-void-command collaborator",
"NullableEnumAssertions<TEnum,TAssertions>","entity","NotHaveValue","property factory wrapper",
"NullableEnumAssertions<TEnum,TAssertions>","entity","BeNull","property non-void-command collaborator",
"EventMonitor<T>","boundary","EventMonitor","copy-constructor",
"EventMonitor<T>","boundary","Clear","controller",
"EventMonitor<T>","boundary","Should","property factory collaborator",
"EventMonitor<T>","boundary","GetRecordingFor","collaborator stateless",
"EventMonitor<T>","boundary","Attach","command collaborator",
"EventMonitor<T>","boundary","Dispose","command collaborator",
"EventMonitor<T>","boundary","DisposeSafeIfRequested","controller stateless",
"EventMonitor<T>","boundary","AttachEventHandler","void-accessor command collaborator",
"EventMonitor<T>","boundary","AttachEventHandler","void-accessor command collaborator",
"EventMonitor<T>","boundary","get","property non-void-command collaborator",
"DoubleAssertions","pure-controller degenerate small-class","DoubleAssertions","constructor",
"DoubleAssertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"EquivalencyPlan","commander boundary","GetEnumerator","property non-void-command collaborator",
"EquivalencyPlan","commander boundary","IEnumerable.GetEnumerator","property non-void-command collaborator",
"EquivalencyPlan","commander boundary","Add<TStep>","wrapper stateless",
"EquivalencyPlan","commander boundary","AddAfter<TPredecessor,TStep>","command collaborator",
"EquivalencyPlan","commander boundary","Insert<TStep>","command",
"EquivalencyPlan","commander boundary","InsertBefore<TSuccessor,TStep>","command collaborator",
"EquivalencyPlan","commander boundary","Remove<TStep>","command",
"EquivalencyPlan","commander boundary","Clear","command",
"EquivalencyPlan","commander boundary","Reset","set",
"FullFrameworkReflector","boundary degenerate small-class","GetAllTypesFromAppDomain","wrapper stateless",
"XAttributeEquivalencyStep","pure-controller degenerate small-class","OnHandle","controller stateless",
"AddNonEmptySymbolParsingStrategy","commander boundary data-class small-class","Parse","set collaborator",
"ValueTypeEquivalencyStep","pure-controller degenerate small-class","Handle","controller stateless",
"MemberPath","unclassified","MemberPath","constructor",
"MemberPath","unclassified","MemberPath","constructor",
"MemberPath","unclassified","MemberPath","constructor",
"MemberPath","unclassified","IsParentOrChildOf","predicate non-void-command",
"MemberPath","unclassified","IsSameAs","predicate controller",
"MemberPath","unclassified","IsParentOf","predicate controller",
"MemberPath","unclassified","IsChildOf","predicate controller",
"MemberPath","unclassified","AsParentCollectionOf","property non-void-command factory collaborator",
"MemberPath","unclassified","IsEquivalentTo","predicate non-void-command",
"MemberPath","unclassified","HasSameParentAs","predicate controller",
"MemberPath","unclassified","WithCollectionAsRoot","property factory",
"MemberPath","unclassified","ToString","get",
"ReferenceEqualityEquivalencyStep","boundary degenerate small-class","Handle","wrapper stateless",
"EnumValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"EnumValueFormatter","degenerate small-class","Format","controller stateless",
"UInt64Assertions","pure-controller degenerate small-class","UInt64Assertions","constructor",
"UInt64Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"GenericDictionaryEquivalencyStep","pure-controller degenerate small-class","Handle","controller stateless",
"NullableSByteAssertions","pure-controller degenerate small-class","NullableSByteAssertions","constructor",
"NullableSByteAssertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"EnumerableEquivalencyStep","pure-controller degenerate small-class","Handle","controller stateless",
"NotBeWriteOnly","pure-controller degenerate","When_having_a_non_writable_stream_be_not_write_only_should_succeed","controller stateless",
"NotBeWriteOnly","pure-controller degenerate","When_having_a_readable_stream_be_not_write_only_should_succeed","controller stateless",
"NotBeWriteOnly","pure-controller degenerate","When_having_a_writeonly_stream_be_not_write_only_should_fail","controller stateless",
"NotBeWriteOnly","pure-controller degenerate","When_null_not_be_write_only_should_fail","controller stateless",
"DictionaryInterfaceInfo","entity boundary small-class","DictionaryInterfaceInfo","constructor",
"DictionaryInterfaceInfo","entity boundary small-class","ConvertFrom","property non-void-command collaborator",
"GivenSelectorSpecs","degenerate","A_consecutive_subject_should_be_selected","controller stateless",
"GivenSelectorSpecs","degenerate","After_a_failed_condition_a_consecutive_subject_should_be_ignored","controller stateless",
"GivenSelectorSpecs","degenerate","A_consecutive_condition_should_be_evaluated","wrapper stateless",
"GivenSelectorSpecs","degenerate","After_a_failed_condition_a_consecutive_condition_should_be_ignored","controller stateless",
"GivenSelectorSpecs","degenerate","When_continuing_an_assertion_chain_it_fails_with_a_message_after_selecting_the_subject","controller stateless",
"GivenSelectorSpecs","degenerate","When_continuing_an_assertion_chain_it_fails_with_a_message_with_arguments_after_selecting_the_subject","controller stateless",
"GivenSelectorSpecs","degenerate","When_continuing_an_assertion_chain_it_fails_with_a_message_with_argument_selectors_after_selecting_the_subject","controller stateless",
"GivenSelectorSpecs","degenerate","When_continuing_a_failed_assertion_chain_consecutive_failure_messages_are_ignored","controller stateless",
"GivenSelectorSpecs","degenerate","When_continuing_a_failed_assertion_chain_consecutive_failure_messages_with_arguments_are_ignored","controller stateless",
"GivenSelectorSpecs","degenerate","When_continuing_a_failed_assertion_chain_consecutive_failure_messages_with_argument_selectors_are_ignored","controller stateless",
"GivenSelectorSpecs","degenerate","The_failure_message_should_be_preceded_by_the_expectation_after_selecting_a_subject","controller stateless",
"GivenSelectorSpecs","degenerate","The_failure_message_should_not_be_preceded_by_the_expectation_after_selecting_a_subject_and_clearing_the_expectation","controller stateless",
"GivenSelectorSpecs","degenerate","Clearing_the_expectation_does_not_affect_a_successful_assertion","controller stateless",
"GivenSelectorSpecs","degenerate","Clearing_the_expectation_does_not_affect_a_failed_assertion","wrapper stateless",
"StringBuilderTraceWriter","unclassified","AddSingle","incidental",
"StringBuilderTraceWriter","unclassified","AddBlock","property set factory collaborator",
"StringBuilderTraceWriter","unclassified","WriteLine","command",
"StringBuilderTraceWriter","unclassified","ToString","property non-void-command",
"DictionaryEquivalencyStep","pure-controller degenerate small-class","OnHandle","controller stateless",
"SingleLineCommentParsingStrategy","data-class","Parse","property set collaborator",
"SingleLineCommentParsingStrategy","data-class","IsWaitingForContextEnd","get",
"SingleLineCommentParsingStrategy","data-class","NotifyEndOfLineReached","set",
"ClassWithCctorAndNonDefaultConstructor","empty","ClassWithCctorAndNonDefaultConstructor","constructor",
"ClassWithCctorAndNonDefaultConstructor","empty","ClassWithCctorAndNonDefaultConstructor","constructor",
"AutoConversionStep","pure-controller degenerate small-class","Handle","controller stateless",
"AutoConversionStep","pure-controller degenerate small-class","ToString","incidental",
"BasicSpecs","pure-controller degenerate","A_null_configuration_is_invalid","controller stateless",
"BasicSpecs","pure-controller degenerate","A_null_as_the_configuration_is_not_valid_for_inequivalency_assertions","controller stateless",
"BasicSpecs","pure-controller degenerate","When_expectation_is_null_it_should_throw","controller stateless",
"BasicSpecs","pure-controller degenerate","When_comparing_nested_collection_with_a_null_value_it_should_fail_with_the_correct_message","controller stateless",
"BasicSpecs","pure-controller degenerate","When_subject_is_null_it_should_throw","controller stateless",
"BasicSpecs","pure-controller degenerate","When_subject_and_expectation_are_null_it_should_not_throw","controller stateless",
"BasicSpecs","pure-controller degenerate","When_subject_and_expectation_are_compared_for_equivalence_it_should_allow_chaining","controller stateless",
"BasicSpecs","pure-controller degenerate","When_subject_and_expectation_are_compared_for_equivalence_with_config_it_should_allow_chaining","controller stateless",
"BasicSpecs","pure-controller degenerate","When_subject_and_expectation_are_compared_for_non_equivalence_it_should_allow_chaining","controller stateless",
"BasicSpecs","pure-controller degenerate","When_subject_and_expectation_are_compared_for_non_equivalence_with_config_it_should_allow_chaining","controller stateless",
"ComparableCustomer","small-class","ComparableCustomer","constructor",
"ComparableCustomer","small-class","CompareTo","property non-void-command",
"KeyDifference<TSubjectKey,TExpectedKey>","empty","KeyDifference","constructor",
"NullValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"NullValueFormatter","degenerate small-class","Format","controller stateless",
"StringEndStrategy","pure-controller small-class","StringEndStrategy","constructor",
"StringEndStrategy","pure-controller small-class","ValidateAgainstMismatch","controller",
"Digit","small-class","Digit","copy-constructor",
"Digit","small-class","GetIndices","property controller",
"Digit","small-class","Increment","predicate set",
"Tracer","entity small-class","Tracer","constructor",
"Tracer","entity small-class","WriteLine","wrapper",
"Tracer","entity small-class","WriteBlock","property non-void-command factory collaborator",
"TestClassForMethodSelectorWithStaticAndNonStaticMethod","degenerate small-class","PublicNonStaticMethod","empty",
"ConfigurationStoreExceptionInterceptor","data-class small-class","ConfigurationStoreExceptionInterceptor","constructor",
"ConfigurationStoreExceptionInterceptor","data-class small-class","GetSetting","property set",
"HttpResponseMessageAssertions<TAssertions>","factory controller","HttpResponseMessageAssertions","constructor",
"HttpResponseMessageAssertions<TAssertions>","factory controller","BeSuccessful","property factory wrapper",
"HttpResponseMessageAssertions<TAssertions>","factory controller","BeRedirection","property factory wrapper",
"HttpResponseMessageAssertions<TAssertions>","factory controller","HaveError","property factory wrapper",
"HttpResponseMessageAssertions<TAssertions>","factory controller","HaveClientError","property factory wrapper",
"HttpResponseMessageAssertions<TAssertions>","factory controller","HaveServerError","property factory wrapper",
"HttpResponseMessageAssertions<TAssertions>","factory controller","HaveStatusCode","property factory wrapper",
"HttpResponseMessageAssertions<TAssertions>","factory controller","NotHaveStatusCode","property factory wrapper",
"BeReadOnly","pure-controller degenerate","When_having_a_readonly_stream_be_read_only_should_succeed","controller stateless",
"BeReadOnly","pure-controller degenerate","When_having_a_writable_stream_be_read_only_should_fail","controller stateless",
"BeReadOnly","pure-controller degenerate","When_having_a_non_readable_stream_be_read_only_should_fail","controller stateless",
"BeReadOnly","pure-controller degenerate","When_null_be_read_only_should_fail","controller stateless",
"SubsequentOrderingGenericCollectionAssertions<TCollection,T,TAssertions>","entity boundary lazy-class degenerate","SubsequentOrderingGenericCollectionAssertions","constructor",
"SubsequentOrderingGenericCollectionAssertions<TCollection,T,TAssertions>","entity boundary lazy-class degenerate","ThenBeInAscendingOrder<TSelector>","wrapper stateless",
"SubsequentOrderingGenericCollectionAssertions<TCollection,T,TAssertions>","entity boundary lazy-class degenerate","ThenBeInAscendingOrder<TSelector>","wrapper stateless",
"SubsequentOrderingGenericCollectionAssertions<TCollection,T,TAssertions>","entity boundary lazy-class degenerate","ThenBeInDescendingOrder<TSelector>","wrapper stateless",
"SubsequentOrderingGenericCollectionAssertions<TCollection,T,TAssertions>","entity boundary lazy-class degenerate","ThenBeInDescendingOrder<TSelector>","wrapper stateless",
"SubsequentOrderingGenericCollectionAssertions<TCollection,T,TAssertions>","entity boundary lazy-class degenerate","ThenBeOrderedBy<TSelector>","property set collaborator",
"SubsequentOrderingGenericCollectionAssertions<TCollection,T,TAssertions>","entity boundary lazy-class degenerate","GetOrderedEnumerable<TSelector>","property non-void-command collaborator",
"EventAssertions<T>","entity boundary","EventAssertions","constructor",
"EventAssertions<T>","entity boundary","Raise","property non-void-command collaborator",
"EventAssertions<T>","entity boundary","NotRaise","void-accessor command collaborator",
"EventAssertions<T>","entity boundary","RaisePropertyChangeFor","property non-void-command collaborator",
"EventAssertions<T>","entity boundary","NotRaisePropertyChangeFor","void-accessor command collaborator",
"StringStartStrategy","pure-controller small-class","StringStartStrategy","constructor",
"StringStartStrategy","pure-controller small-class","ValidateAgainstMismatch","controller",
"CollectionEqualBenchmarks","commander boundary","GlobalSetup","command",
"CollectionEqualBenchmarks","commander boundary","CollectionEqual_Generic","wrapper",
"CollectionEqualBenchmarks","commander boundary","CollectionEqual_Optimized","wrapper",
"CollectionEqualBenchmarks","commander boundary","CollectionEqual_CustomComparer","wrapper",
"FailReason","empty","FailReason","constructor",
"Clock","entity boundary small-class","DelayAsync","property non-void-command collaborator",
"WhoseValueConstraint<TCollection,TKey,TValue,TAssertions>","empty","WhoseValueConstraint","constructor",
"AssertionEngineInitializerAttribute","boundary small-class","AssertionEngineInitializerAttribute","constructor",
"AssertionEngineInitializerAttribute","boundary small-class","Initialize","wrapper",
"SubsequentOrderingGenericCollectionAssertions<TCollection,T>","empty","SubsequentOrderingGenericCollectionAssertions","constructor",
"TypeMemberReflector","empty","TypeMemberReflector","constructor",
"ContinuationOfGiven<TSubject>","empty","ContinuationOfGiven","constructor",
"ContextDataItems","entity boundary","GetReportable","property non-void-command collaborator",
"ContextDataItems","entity boundary","AsStringOrDefault","property non-void-command collaborator",
"ContextDataItems","entity boundary","Add","command collaborator",
"ContextDataItems","entity boundary","Add","void-accessor command collaborator",
"ContextDataItems","entity boundary","Get<T>","property non-void-command collaborator",
"GuidValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"GuidValueFormatter","degenerate small-class","Format","controller stateless",
"TaskFormatter","degenerate small-class","CanHandle","collaborator incidental",
"TaskFormatter","degenerate small-class","Format","controller stateless",
"FunctionAssertions<T>","unclassified","FunctionAssertions","constructor",
"FunctionAssertions<T>","unclassified","FunctionAssertions","constructor",
"FunctionAssertions<T>","unclassified","InvokeSubject","wrapper stateless",
"FunctionAssertions<T>","unclassified","NotThrow","property factory wrapper",
"FunctionAssertions<T>","unclassified","NotThrowAfter","property factory wrapper",
"TestFrameworkProvider","entity boundary","TestFrameworkProvider","constructor",
"TestFrameworkProvider","entity boundary","Throw","command",
"TestFrameworkProvider","entity boundary","DetectFramework","non-void-command factory collaborator",
"TestFrameworkProvider","entity boundary","AttemptToDetectUsingAppSetting","property wrapper",
"ConstantSubExpressionReductionVisitor","entity boundary small-class","Visit","property non-void-command collaborator",
"StringCollectionAssertions","empty","StringCollectionAssertions","constructor",
"CollectionMemberOptionsDecorator","entity boundary","CollectionMemberOptionsDecorator","constructor",
"CollectionMemberOptionsDecorator","entity boundary","GetEqualityStrategy","property non-void-command collaborator",
"CollectionMemberOptionsDecorator","entity boundary","get","property non-void-command collaborator",
"CollectionMemberOptionsDecorator","entity boundary","get","property non-void-command collaborator",
"CollectionMemberOptionsDecorator","entity boundary","get","property non-void-command factory collaborator",
"CollectionMemberOptionsDecorator","entity boundary","get","get collaborator",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","GenericDictionaryAssertions","constructor",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","Equal<T>","property factory controller",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotEqual<T>","property factory controller",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","BeEquivalentTo<TExpectation>","wrapper stateless",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","BeEquivalentTo<TExpectation>","property set factory collaborator",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","ContainKey","property non-void-command factory collaborator",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","ContainKeys","wrapper stateless",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","ContainKeys","property factory controller",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotContainKey","property factory wrapper",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotContainKeys","wrapper stateless",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotContainKeys","property factory controller",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","ContainValue","property non-void-command factory collaborator",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","ContainValues","wrapper stateless",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","ContainValues","property non-void-command collaborator",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","ContainValuesAndWhich","property factory controller",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotContainValue","property factory wrapper",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotContainValues","wrapper stateless",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotContainValues","property factory controller",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","Contain","wrapper stateless",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","Contain","property factory controller",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","Contain","property non-void-command collaborator",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","Contain","property factory wrapper",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotContain","wrapper stateless",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotContain","property factory controller",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotContain","property non-void-command collaborator",
"GenericDictionaryAssertions<TCollection,TKey,TValue,TAssertions>","controller","NotContain","property factory wrapper",
"UInt32ValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"UInt32ValueFormatter","degenerate small-class","Format","controller stateless",
"SubsequentOrderingAssertions<T>","empty","SubsequentOrderingAssertions","constructor",
"DateTimeAssertions","empty","DateTimeAssertions","constructor",
"ExceptionAssertions<TException>","boundary","ExceptionAssertions","constructor",
"ExceptionAssertions<TException>","boundary","WithMessage","get non-void-command collaborator",
"ExceptionAssertions<TException>","boundary","WithInnerException<TInnerException>","property non-void-command factory collaborator",
"ExceptionAssertions<TException>","boundary","WithInnerException","property non-void-command factory collaborator",
"ExceptionAssertions<TException>","boundary","WithInnerExceptionExactly<TInnerException>","property non-void-command factory collaborator",
"ExceptionAssertions<TException>","boundary","WithInnerExceptionExactly","property non-void-command factory collaborator",
"ExceptionAssertions<TException>","boundary","Where","get controller",
"ExceptionAssertions<TException>","boundary","AssertInnerExceptionExactly","property non-void-command collaborator",
"ExceptionAssertions<TException>","boundary","AssertInnerExceptions","property non-void-command collaborator",
"ExceptionAssertions<TException>","boundary","get","property non-void-command collaborator",
"RunAllUserStepsEquivalencyStep","pure-controller degenerate small-class","Handle","controller stateless",
"MaximumMatchingSolver<TValue>","entity boundary","MaximumMatchingSolver","constructor",
"MaximumMatchingSolver<TValue>","entity boundary","Solve","property non-void-command factory collaborator",
"MaximumMatchingSolver<TValue>","entity boundary","FindMatchForPredicate","property non-void-command collaborator",
"MaximumMatchingSolver<TValue>","entity boundary","GetMatchingElements","property non-void-command collaborator",
"ObjectAssertions","factory controller","ObjectAssertions","constructor",
"ObjectAssertions","factory controller","Be<TExpectation>","property factory wrapper",
"ObjectAssertions","factory controller","NotBe<TExpectation>","property factory wrapper",
"ObjectAssertions","factory controller","BeOneOf<TExpectation>","property factory wrapper",
"MultiDimensionalArrayEquivalencyStep","pure-controller degenerate small-class","Handle","controller stateless",
"DummyPropertyAttribute","empty","DummyPropertyAttribute","constructor",
"DummyPropertyAttribute","empty","DummyPropertyAttribute","constructor",
"ObjectInfo","empty","ObjectInfo","constructor",
"CollectionAssertionSpecs","degenerate","When_a_collection_does_not_contain_an_ordered_item_it_should_throw_with_a_clear_explanation","collaborator incidental",
"CollectionAssertionSpecs","degenerate","When_a_collection_does_not_contain_an_ordered_item_it_should_throw_with_a_clear_explanation","collaborator incidental",
"CollectionAssertionSpecs","degenerate","When_injecting_a_null_predicate_into_ContainSingle_it_should_throw","controller stateless",
"CollectionAssertionSpecs","degenerate","When_a_collection_contains_a_single_item_matching_a_predicate_it_should_succeed","controller stateless",
"CollectionAssertionSpecs","degenerate","When_asserting_an_empty_collection_contains_a_single_item_matching_a_predicate_it_should_throw","controller stateless",
"CollectionAssertionSpecs","degenerate","When_asserting_a_null_collection_contains_a_single_item_matching_a_predicate_it_should_throw","controller stateless",
"CollectionAssertionSpecs","degenerate","When_non_empty_collection_does_not_contain_a_single_item_matching_a_predicate_it_should_throw","controller stateless",
"CollectionAssertionSpecs","degenerate","When_non_empty_collection_contains_more_than_a_single_item_matching_a_predicate_it_should_throw","controller stateless",
"CollectionAssertionSpecs","degenerate","When_single_item_matching_a_predicate_is_found_it_should_allow_continuation","controller stateless",
"CollectionAssertionSpecs","degenerate","When_single_item_contains_brackets_it_should_format_them_properly","controller stateless",
"CollectionAssertionSpecs","degenerate","When_single_item_contains_string_interpolation_it_should_format_brackets_properly","controller stateless",
"CollectionAssertionSpecs","degenerate","When_a_collection_contains_a_single_item_it_should_succeed","controller stateless",
"CollectionAssertionSpecs","degenerate","When_asserting_an_empty_collection_contains_a_single_item_it_should_throw","controller stateless",
"CollectionAssertionSpecs","degenerate","When_asserting_a_null_collection_contains_a_single_item_it_should_throw","controller stateless",
"CollectionAssertionSpecs","degenerate","When_non_empty_collection_does_not_contain_a_single_item_it_should_throw","controller stateless",
"CollectionAssertionSpecs","degenerate","When_non_empty_collection_contains_more_than_a_single_item_it_should_throw","controller stateless",
"CollectionAssertionSpecs","degenerate","When_single_item_is_found_it_should_allow_continuation","controller stateless",
"CollectionAssertionSpecs","degenerate","When_collection_is_IEnumerable_it_should_be_evaluated_only_once_with_predicate","controller stateless",
"CollectionAssertionSpecs","degenerate","When_collection_is_IEnumerable_it_should_be_evaluated_only_once","controller stateless",
"CollectionAssertionSpecs","degenerate","When_an_assertion_fails_on_ContainSingle_succeeding_message_should_be_included","controller stateless",
"Int64ValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"Int64ValueFormatter","degenerate small-class","Format","controller stateless",
"PropertyInfoAssertions","entity factory controller","PropertyInfoAssertions","constructor",
"PropertyInfoAssertions","entity factory controller","BeVirtual","property non-void-command factory collaborator",
"PropertyInfoAssertions","entity factory controller","NotBeVirtual","property non-void-command factory collaborator",
"PropertyInfoAssertions","entity factory controller","BeWritable","property factory wrapper",
"PropertyInfoAssertions","entity factory controller","BeWritable","property factory wrapper",
"PropertyInfoAssertions","entity factory controller","NotBeWritable","property factory wrapper",
"PropertyInfoAssertions","entity factory controller","BeReadable","property factory wrapper",
"PropertyInfoAssertions","entity factory controller","BeReadable","property factory wrapper",
"PropertyInfoAssertions","entity factory controller","NotBeReadable","property factory wrapper",
"PropertyInfoAssertions","entity factory controller","Return","property factory wrapper",
"PropertyInfoAssertions","entity factory controller","Return<TReturn>","property non-void-command collaborator",
"PropertyInfoAssertions","entity factory controller","NotReturn","property factory wrapper",
"PropertyInfoAssertions","entity factory controller","NotReturn<TReturn>","property non-void-command collaborator",
"MaximumMatchingSolution<TValue>","entity boundary small-class","MaximumMatchingSolution","constructor",
"MaximumMatchingSolution<TValue>","entity boundary small-class","GetUnmatchedPredicates","property non-void-command collaborator",
"MaximumMatchingSolution<TValue>","entity boundary small-class","GetUnmatchedElements","property non-void-command collaborator",
"RecordedEvent","empty","RecordedEvent","constructor",
"DateTimeRangeAssertions<TAssertions>","entity factory controller small-class","DateTimeRangeAssertions","constructor",
"DateTimeRangeAssertions<TAssertions>","entity factory controller small-class","Before","property non-void-command factory collaborator",
"DateTimeRangeAssertions<TAssertions>","entity factory controller small-class","After","property non-void-command factory collaborator",
"AssertionOptions","empty","AssertionOptions","constructor",
"MappedPathMatchingRule","controller small-class","MappedPathMatchingRule","constructor",
"MappedPathMatchingRule","controller small-class","Match","property controller",
"EqualityComparerEquivalencyStep<T>","small-class","EqualityComparerEquivalencyStep","constructor",
"EqualityComparerEquivalencyStep<T>","small-class","Handle","property non-void-command collaborator",
"EqualityComparerEquivalencyStep<T>","small-class","ToString","incidental",
"XmlSpecs","pure-controller degenerate","When_asserting_a_xml_selfclosing_document_is_equivalent_to_a_different_xml_document_with_same_structure_it_should_succeed","controller stateless",
"XmlSpecs","pure-controller degenerate","When_asserting_a_xml_document_is_equivalent_to_a_xml_document_with_elements_missing_it_should_fail","controller stateless",
"XmlSpecs","pure-controller degenerate","When_xml_elements_are_equivalent_it_should_not_throw","controller stateless",
"XmlSpecs","pure-controller degenerate","When_an_xml_element_property_is_equivalent_to_an_xml_element_with_elements_missing_it_should_fail","controller stateless",
"XmlSpecs","pure-controller degenerate","When_asserting_an_xml_attribute_is_equal_to_the_same_xml_attribute_it_should_succeed","controller stateless",
"XmlSpecs","pure-controller degenerate","When_asserting_an_xml_attribute_is_equal_to_a_different_xml_attribute_it_should_fail_with_descriptive_message","controller stateless",
"CallerStatementBuilder","commander boundary small-class","CallerStatementBuilder","constructor",
"CallerStatementBuilder","commander boundary small-class","Append","command collaborator",
"MemberPathSegmentEqualityComparer","small-class","Equals","predicate wrapper",
"MemberPathSegmentEqualityComparer","small-class","GetHashCode","controller stateless",
"Predicate<TValue>","empty","Predicate","constructor",
"CulturedFactAttribute","empty","CulturedFactAttribute","constructor",
"Configuration","unclassified","Configuration","copy-constructor",
"Configuration","unclassified","DetermineFormatterDetectionMode","property non-void-command collaborator",
"Configuration","unclassified","get","property non-void-command collaborator",
"Configuration","unclassified","set","set collaborator",
"Configuration","unclassified","get","get set",
"Configuration","unclassified","set","non-void-command",
"Configuration","unclassified","get","get set",
"TaskCompletionSourceAssertionsBase","entity boundary small-class","TaskCompletionSourceAssertionsBase","constructor",
"TaskCompletionSourceAssertionsBase","entity boundary small-class","CompletesWithinTimeoutAsync","property non-void-command collaborator",
"AppSettingsConfigurationStore","boundary degenerate small-class","GetSetting","wrapper stateless",
"TestClassForMethodSelectorWithNonInheritableAttribute","degenerate small-class","PublicVirtualVoidMethodWithAttribute","empty",
"XDocumentEquivalencyStep","pure-controller degenerate small-class","OnHandle","controller stateless",
"GenericDictionaryAssertions<TCollection,TKey,TValue>","empty","GenericDictionaryAssertions","constructor",
"PredicateBasedOrderingRule","data-provider small-class","PredicateBasedOrderingRule","constructor",
"PredicateBasedOrderingRule","data-provider small-class","Evaluate","property wrapper",
"PredicateBasedOrderingRule","data-provider small-class","ToString","incidental",
"TypeSelector","unclassified","TypeSelector","constructor",
"TypeSelector","unclassified","TypeSelector","constructor",
"TypeSelector","unclassified","ToArray","property non-void-command collaborator",
"TypeSelector","unclassified","ThatDeriveFrom<TBase>","get set",
"TypeSelector","unclassified","ThatDoNotDeriveFrom<TBase>","get set",
"TypeSelector","unclassified","ThatImplement<TInterface>","get set",
"TypeSelector","unclassified","ThatDoNotImplement<TInterface>","get set",
"TypeSelector","unclassified","ThatAreDecoratedWith<TAttribute>","get set",
"TypeSelector","unclassified","ThatAreDecoratedWithOrInherit<TAttribute>","get set",
"TypeSelector","unclassified","ThatAreNotDecoratedWith<TAttribute>","get set",
"TypeSelector","unclassified","ThatAreNotDecoratedWithOrInherit<TAttribute>","get set",
"TypeSelector","unclassified","ThatAreInNamespace","get set",
"TypeSelector","unclassified","ThatAreNotInNamespace","get set",
"TypeSelector","unclassified","ThatAreUnderNamespace","get set",
"TypeSelector","unclassified","ThatAreNotUnderNamespace","get set",
"TypeSelector","unclassified","ThatAreValueTypes","get set",
"TypeSelector","unclassified","ThatAreNotValueTypes","get set",
"TypeSelector","unclassified","ThatAreClasses","get set",
"TypeSelector","unclassified","ThatAreNotClasses","get set",
"TypeSelector","unclassified","ThatAreAbstract","get set",
"TypeSelector","unclassified","ThatAreNotAbstract","get set",
"TypeSelector","unclassified","ThatAreSealed","get set",
"TypeSelector","unclassified","ThatAreNotSealed","get set",
"TypeSelector","unclassified","ThatAreInterfaces","get set",
"TypeSelector","unclassified","ThatAreNotInterfaces","get set",
"TypeSelector","unclassified","ThatAreStatic","get set",
"TypeSelector","unclassified","ThatAreNotStatic","get set",
"TypeSelector","unclassified","ThatSatisfy","get set collaborator",
"TypeSelector","unclassified","UnwrapTaskTypes","get property set collaborator",
"TypeSelector","unclassified","UnwrapEnumerableTypes","get set collaborator",
"TypeSelector","unclassified","GetEnumerator","property non-void-command collaborator",
"TypeSelector","unclassified","IEnumerable.GetEnumerator","property non-void-command collaborator",
"AwaitParsingStrategy","degenerate","Parse","property controller",
"AwaitParsingStrategy","degenerate","IsWaitingForContextEnd","incidental",
"AwaitParsingStrategy","degenerate","NotifyEndOfLineReached","empty",
"StopwatchTimer","commander small-class","Dispose","command",
"Int32Assertions","pure-controller degenerate small-class","Int32Assertions","constructor",
"Int32Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"TaskCompletionSourceAssertions","entity factory controller small-class","TaskCompletionSourceAssertions","constructor",
"TaskCompletionSourceAssertions","entity factory controller small-class","TaskCompletionSourceAssertions","constructor",
"TaskCompletionSourceAssertions","entity factory controller small-class","CompleteWithinAsync","property non-void-command factory collaborator",
"TaskCompletionSourceAssertions","entity factory controller small-class","NotCompleteWithinAsync","property non-void-command factory collaborator",
"NullableUInt64Assertions","pure-controller degenerate small-class","NullableUInt64Assertions","constructor",
"NullableUInt64Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"FrameworkSpecs","pure-controller degenerate","When_mstestv2_is_used_it_should_throw_mstest_exceptions_for_assertion_failures","controller stateless",
"FrameworkSpecs","pure-controller degenerate","When_nunit3_is_used_it_should_throw_nunit_exceptions_for_assertion_failures","controller stateless",
"FrameworkSpecs","pure-controller degenerate","Throw_nunit_framework_exception_for_nunit4_tests","controller stateless",
"FrameworkSpecs","pure-controller degenerate","When_xunit2_is_used_it_should_throw_xunit_exceptions_for_assertion_failures","controller stateless",
"GenericCollectionAssertions<T>","empty","GenericCollectionAssertions","constructor",
"BeEquivalentToWithDeeplyNestedStructures","commander small-class","GlobalSetup","command",
"BeEquivalentToWithDeeplyNestedStructures","commander small-class","BeEquivalentTo","command",
"AssertionFailedException","empty","AssertionFailedException","constructor",
"AssertionFailedException","empty","AssertionFailedException","constructor",
"AssertionExtensions","empty","AssertionExtensions","constructor",
"AndConstraint<T>","empty","AndConstraint","constructor",
"MethodBaseAssertions<TSubject,TAssertions>","entity factory controller small-class","MethodBaseAssertions","constructor",
"MethodBaseAssertions<TSubject,TAssertions>","entity factory controller small-class","HaveAccessModifier","property non-void-command factory collaborator",
"MethodBaseAssertions<TSubject,TAssertions>","entity factory controller small-class","NotHaveAccessModifier","property non-void-command factory collaborator",
"MultiLineCommentParsingStrategy","unclassified","Parse","property non-void-command collaborator",
"MultiLineCommentParsingStrategy","unclassified","IsWaitingForContextEnd","get",
"MultiLineCommentParsingStrategy","unclassified","NotifyEndOfLineReached","empty",
"DummyImplementingClass","degenerate small-class","Dispose","empty",
"Execute","boundary degenerate small-class","get","wrapper stateless",
"IncludeMemberByPredicateSelectionRule","controller small-class","IncludeMemberByPredicateSelectionRule","constructor",
"IncludeMemberByPredicateSelectionRule","controller small-class","SelectMembers","factory controller stateless",
"IncludeMemberByPredicateSelectionRule","controller small-class","ToString","property",
"ShouldCallParsingStrategy","degenerate","Parse","property controller",
"ShouldCallParsingStrategy","degenerate","IsWaitingForContextEnd","incidental",
"ShouldCallParsingStrategy","degenerate","NotifyEndOfLineReached","empty",
"ExecutionTime","empty","ExecutionTime","constructor",
"ExecutionTime","empty","ExecutionTime","constructor",
"ExecutionTime","empty","ExecutionTime","constructor",
"ExecutionTime","empty","ExecutionTime","constructor",
"NullableInt32Assertions","pure-controller degenerate small-class","NullableInt32Assertions","constructor",
"NullableInt32Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"DateTimeAssertions<TAssertions>","factory controller","DateTimeAssertions","constructor",
"DateTimeAssertions<TAssertions>","factory controller","Be","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","Be","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","BeCloseTo","property factory controller",
"DateTimeAssertions<TAssertions>","factory controller","NotBeCloseTo","property factory controller",
"DateTimeAssertions<TAssertions>","factory controller","BeBefore","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotBeBefore","property non-void-command collaborator",
"DateTimeAssertions<TAssertions>","factory controller","BeOnOrBefore","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotBeOnOrBefore","property non-void-command collaborator",
"DateTimeAssertions<TAssertions>","factory controller","BeAfter","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotBeAfter","property non-void-command collaborator",
"DateTimeAssertions<TAssertions>","factory controller","BeOnOrAfter","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotBeOnOrAfter","property non-void-command collaborator",
"DateTimeAssertions<TAssertions>","factory controller","HaveYear","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotHaveYear","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","HaveMonth","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotHaveMonth","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","HaveDay","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotHaveDay","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","HaveHour","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotHaveHour","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","HaveMinute","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotHaveMinute","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","HaveSecond","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotHaveSecond","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","BeMoreThan","property factory collaborator",
"DateTimeAssertions<TAssertions>","factory controller","BeAtLeast","property factory collaborator",
"DateTimeAssertions<TAssertions>","factory controller","BeExactly","property factory collaborator",
"DateTimeAssertions<TAssertions>","factory controller","BeWithin","property factory collaborator",
"DateTimeAssertions<TAssertions>","factory controller","BeLessThan","property factory collaborator",
"DateTimeAssertions<TAssertions>","factory controller","BeSameDateAs","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotBeSameDateAs","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","BeOneOf","wrapper stateless",
"DateTimeAssertions<TAssertions>","factory controller","BeOneOf","property non-void-command collaborator",
"DateTimeAssertions<TAssertions>","factory controller","BeOneOf","property non-void-command collaborator",
"DateTimeAssertions<TAssertions>","factory controller","BeOneOf","property factory controller",
"DateTimeAssertions<TAssertions>","factory controller","BeIn","property factory wrapper",
"DateTimeAssertions<TAssertions>","factory controller","NotBeIn","property factory wrapper",
"RecordSpecs","commander boundary","When_the_subject_is_a_record_it_should_compare_it_by_its_members","command collaborator",
"RecordSpecs","commander boundary","When_the_subject_is_a_record_struct_it_should_compare_it_by_its_members","controller stateless",
"RecordSpecs","commander boundary","When_the_subject_is_a_record_it_should_mention_that_in_the_configuration_output","set collaborator",
"RecordSpecs","commander boundary","When_a_record_should_be_treated_as_a_value_type_it_should_use_its_equality_for_comparing","command collaborator",
"RecordSpecs","commander boundary","When_all_records_should_be_treated_as_value_types_it_should_use_equality_for_comparing","command collaborator",
"RecordSpecs","commander boundary","When_all_records_except_a_specific_type_should_be_treated_as_value_types_it_should_compare_that_specific_type_by_its_members","command collaborator",
"RecordSpecs","commander boundary","When_global_record_comparing_options_are_chained_it_should_ensure_the_last_one_wins","set collaborator",
"StringValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"StringValueFormatter","degenerate small-class","Format","controller stateless",
"CollectionMemberObjectInfo","empty","CollectionMemberObjectInfo","constructor",
"QuotesParsingStrategy","data-provider","Parse","property non-void-command collaborator",
"QuotesParsingStrategy","data-provider","IsWaitingForContextEnd","get",
"QuotesParsingStrategy","data-provider","NotifyEndOfLineReached","empty",
"QuotesParsingStrategy","data-provider","IsVerbatim","predicate collaborator",
"ByteValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"ByteValueFormatter","degenerate small-class","Format","controller stateless",
"Complex","empty","Complex","constructor",
"ClassWithAPrivateField","empty","ClassWithAPrivateField","constructor",
"SimpleEqualityEquivalencyStep","pure-controller degenerate small-class","Handle","controller stateless",
"FallbackTestFramework","degenerate small-class","Throw","stateless",
"DictionarySpecs","pure-controller degenerate small-class","Add","controller stateless",
"PathBasedOrderingRule","data-provider","PathBasedOrderingRule","constructor",
"PathBasedOrderingRule","data-provider","Evaluate","property non-void-command collaborator",
"PathBasedOrderingRule","data-provider","RemoveInitialIndexQualifier","property controller",
"PathBasedOrderingRule","data-provider","ToString","property",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_method_info_selector_is_created_with_a_null_type_it_should_throw","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_method_info_selector_is_created_with_a_null_type_list_it_should_throw","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_method_info_selector_is_null_then_should_should_throw","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_from_types_in_an_assembly_it_should_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_are_public_or_internal_it_should_return_only_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_decorated_with_specific_attribute_it_should_return_only_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_not_decorated_with_specific_attribute_it_should_return_only_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_return_a_specific_type_it_should_return_only_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_do_not_return_a_specific_type_it_should_return_only_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_without_return_value_it_should_return_only_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_with_return_value_it_should_return_only_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_combining_filters_to_filter_methods_it_should_return_only_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_decorated_with_an_inheritable_attribute_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_decorated_with_or_inheriting_an_inheritable_attribute_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_not_decorated_with_an_inheritable_attribute_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_not_decorated_with_or_inheriting_an_inheritable_attribute_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_decorated_with_a_noninheritable_attribute_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_decorated_with_or_inheriting_a_noninheritable_attribute_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_not_decorated_with_a_noninheritable_attribute_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_are_abstract_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_are_not_abstract_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_are_async_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_are_not_async_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_are_virtual_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_are_not_virtual_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_are_static_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_that_are_not_static_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_not_decorated_with_or_inheriting_a_noninheritable_attribute_it_should_only_return_the_applicable_methods","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_selecting_methods_return_types_it_should_return_the_correct_types","controller stateless",
"MethodInfoSelectorSpecs","pure-controller degenerate","When_accidentally_using_equals_it_should_throw_a_helpful_error","controller stateless",
"FallbackTestFrameworkTests","pure-controller degenerate small-class","The_fallback_test_framework_is_available","controller stateless",
"FallbackTestFrameworkTests","pure-controller degenerate small-class","Throwing_with_messages_throws_the_exception","controller stateless",
"XmlReaderValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"XmlReaderValueFormatter","degenerate small-class","Format","controller stateless",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","StringCollectionAssertions","constructor",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","Equal","property non-void-command collaborator",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","Equal","property non-void-command collaborator",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","BeEquivalentTo","wrapper stateless",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","BeEquivalentTo","wrapper stateless",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","BeEquivalentTo","property set factory collaborator",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","AllBe","wrapper stateless",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","AllBe","property wrapper",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","ContainMatch","property non-void-command factory collaborator",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","ContainsMatch","predicate non-void-command",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","AllThatMatch","property non-void-command collaborator",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","NotContainMatch","property non-void-command factory collaborator",
"StringCollectionAssertions<TCollection,TAssertions>","entity boundary","NotContainsMatch","predicate non-void-command",
"NullConfigurationStore","degenerate small-class","GetSetting","incidental",
"Reason","empty","Reason","constructor",
"AssertionRuleSpecs","pure-controller degenerate","When_two_objects_have_the_same_property_values_it_should_succeed","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_two_objects_have_the_same_nullable_property_values_it_should_succeed","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_two_objects_have_the_same_properties_but_a_different_value_it_should_throw","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_subject_has_a_valid_property_that_is_compared_with_a_null_property_it_should_throw_with_descriptive_message","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_two_collection_properties_dont_match_it_should_throw_and_specify_the_difference","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_two_string_properties_do_not_match_it_should_throw_and_state_the_difference","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_two_properties_are_of_derived_types_but_are_equal_it_should_succeed","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_two_properties_have_the_same_declared_type_but_different_runtime_types_and_are_equivalent_according_to_the_declared_type_it_should_succeed","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_a_nested_property_is_equal_based_on_equality_comparer_it_should_not_throw","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_a_nested_property_is_unequal_based_on_equality_comparer_it_should_throw","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_the_subjects_property_type_is_different_from_the_equality_comparer_it_should_throw","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_an_invalid_equality_comparer_is_provided_it_should_throw","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_the_compile_time_type_does_not_match_the_equality_comparer_type_it_should_use_the_default_mechanics","controller stateless",
"AssertionRuleSpecs","pure-controller degenerate","When_the_runtime_type_does_match_the_equality_comparer_type_it_should_use_the_default_mechanics","controller stateless",
"Comparands","boundary","Comparands","constructor",
"Comparands","boundary","Comparands","constructor",
"Comparands","boundary","GetExpectedType","controller stateless",
"Comparands","boundary","ToString","wrapper stateless",
"Comparands","boundary","get","property collaborator",
"Comparands","boundary","get","property non-void-command collaborator",
"Services","data-provider boundary small-class","Services","constructor",
"Services","data-provider boundary small-class","get","property collaborator",
"ConversionSelector","boundary","ConversionSelector","constructor",
"ConversionSelector","boundary","ConversionSelector","copy-constructor",
"ConversionSelector","boundary","IncludeAll","command",
"ConversionSelector","boundary","Include","command collaborator",
"ConversionSelector","boundary","Exclude","command collaborator",
"ConversionSelector","boundary","RequiresConversion","predicate non-void-command collaborator",
"ConversionSelector","boundary","ToString","property controller",
"ConversionSelector","boundary","Clone","property factory",
"ParameterDetector","entity boundary small-class","Visit","property non-void-command collaborator",
"ParameterDetector","entity boundary small-class","VisitParameter","property set collaborator",
"MemberLessObjectsSpecs","pure-controller degenerate","When_asserting_instances_of_an_anonymous_type_having_no_members_are_equivalent_it_should_fail","controller stateless",
"MemberLessObjectsSpecs","pure-controller degenerate","When_asserting_instances_of_a_class_having_no_members_are_equivalent_it_should_fail","controller stateless",
"MemberLessObjectsSpecs","pure-controller degenerate","When_asserting_instances_of_Object_are_equivalent_it_should_fail","controller stateless",
"MemberLessObjectsSpecs","pure-controller degenerate","When_asserting_instance_of_object_is_equivalent_to_null_it_should_fail_with_a_descriptive_message","controller stateless",
"MemberLessObjectsSpecs","pure-controller degenerate","When_asserting_null_is_equivalent_to_instance_of_object_it_should_fail","controller stateless",
"MemberLessObjectsSpecs","pure-controller degenerate","When_an_type_only_exposes_fields_but_fields_are_ignored_in_the_equivalence_comparision_it_should_fail","controller stateless",
"MemberLessObjectsSpecs","pure-controller degenerate","When_an_type_only_exposes_properties_but_properties_are_ignored_in_the_equivalence_comparision_it_should_fail","controller stateless",
"MemberLessObjectsSpecs","pure-controller degenerate","When_asserting_instances_of_arrays_of_types_in_System_are_equivalent_it_should_respect_the_runtime_type","controller stateless",
"MemberLessObjectsSpecs","pure-controller degenerate","When_throwing_on_missing_members_and_there_are_no_missing_members_should_not_throw","controller stateless",
"MemberLessObjectsSpecs","pure-controller degenerate","When_throwing_on_missing_members_and_there_is_a_missing_member_should_throw","controller stateless",
"MemberLessObjectsSpecs","pure-controller degenerate","When_throwing_on_missing_members_and_there_is_an_additional_property_on_subject_should_not_throw","controller stateless",
"NullableNumericAssertionSpecs","pure-controller degenerate small-class","Should_support_chaining_constraints_with_and","controller stateless",
"MaxLinesExceededException","empty","MaxLinesExceededException","constructor",
"MaxLinesExceededException","empty","MaxLinesExceededException","constructor",
"MaxLinesExceededException","empty","MaxLinesExceededException","constructor",
"SemicolonParsingStrategy","pure-controller degenerate","Parse","controller stateless",
"SemicolonParsingStrategy","pure-controller degenerate","IsWaitingForContextEnd","incidental",
"SemicolonParsingStrategy","pure-controller degenerate","NotifyEndOfLineReached","empty",
"AllFieldsSelectionRule","pure-controller degenerate small-class","SelectMembers","controller stateless",
"AllFieldsSelectionRule","pure-controller degenerate small-class","ToString","incidental",
"LateBoundTestFramework","small-class","Throw","command collaborator",
"LateBoundTestFramework","small-class","get","predicate set",
"EquivalencyOptions<TExpectation>","entity boundary","EquivalencyOptions","constructor",
"EquivalencyOptions<TExpectation>","entity boundary","EquivalencyOptions","copy-constructor",
"EquivalencyOptions<TExpectation>","entity boundary","Excluding","get non-void-command collaborator",
"EquivalencyOptions<TExpectation>","entity boundary","For<TNext>","property non-void-command factory collaborator",
"EquivalencyOptions<TExpectation>","entity boundary","Including","get non-void-command collaborator",
"EquivalencyOptions<TExpectation>","entity boundary","WithStrictOrderingFor","get non-void-command collaborator",
"EquivalencyOptions<TExpectation>","entity boundary","WithoutStrictOrderingFor","get non-void-command collaborator",
"EquivalencyOptions<TExpectation>","entity boundary","AsCollection","property factory collaborator",
"EquivalencyOptions<TExpectation>","entity boundary","WithMapping<TSubject>","property non-void-command collaborator",
"EquivalencyOptions<TExpectation>","entity boundary","WithMapping","get wrapper",
"EquivalencyOptions<TExpectation>","entity boundary","WithMapping<TNestedExpectation,TNestedSubject>","property non-void-command collaborator",
"EquivalencyOptions<TExpectation>","entity boundary","WithMapping<TNestedExpectation,TNestedSubject>","get wrapper",
"ActionAssertions","entity","ActionAssertions","constructor",
"ActionAssertions","entity","ActionAssertions","constructor",
"ActionAssertions","entity","NotThrow","property non-void-command factory collaborator",
"ActionAssertions","entity","NotThrowAfter","property non-void-command factory collaborator",
"ActionAssertions","entity","InvokeSubject","wrapper stateless",
"NestedExclusionOptionBuilder<TExpectation,TCurrent>","entity small-class","NestedExclusionOptionBuilder","constructor",
"NestedExclusionOptionBuilder<TExpectation,TCurrent>","entity small-class","Exclude","get non-void-command collaborator",
"NestedExclusionOptionBuilder<TExpectation,TCurrent>","entity small-class","For<TNext>","property non-void-command factory collaborator",
"EquivalencyOptions","empty","EquivalencyOptions","constructor",
"AggregateExceptionExtractor","boundary degenerate small-class","OfType<T>","wrapper stateless",
"CountingGenericEnumerable<TElement>","entity boundary small-class","CountingGenericEnumerable","constructor",
"CountingGenericEnumerable<TElement>","entity boundary small-class","GetEnumerator","property set collaborator",
"CountingGenericEnumerable<TElement>","entity boundary small-class","IEnumerable.GetEnumerator","property non-void-command collaborator",
"ClassWithMembers","degenerate","ClassWithMembers","constructor",
"ClassWithMembers","degenerate","ClassWithMembers","constructor",
"ClassWithMembers","degenerate","VoidMethod","empty",
"ClassWithMembers","degenerate","VoidMethod","empty",
"ClassWithMembers","degenerate","set","empty",
"ClassWithMembers","degenerate","set","empty",
"ClassWithMembers","degenerate","set","empty",
"SomeTestClass","small-class","Throw","unclassified",
"TryMatchByNameRule","pure-controller degenerate small-class","Match","factory controller stateless",
"TryMatchByNameRule","pure-controller degenerate small-class","ToString","incidental",
"App","data-provider boundary small-class","App","constructor",
"App","data-provider boundary small-class","OnLaunched","void-accessor wrapper",
"DictionaryValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"DictionaryValueFormatter","degenerate small-class","Format","controller stateless",
"DerivedCustomerType","empty","DerivedCustomerType","constructor",
"TimeSpanFormatterSpecs","pure-controller degenerate","When_zero_time_span_it_should_return_a_literal","controller stateless",
"TimeSpanFormatterSpecs","pure-controller degenerate","When_max_time_span_it_should_return_a_literal","controller stateless",
"TimeSpanFormatterSpecs","pure-controller degenerate","When_min_time_span_it_should_return_a_literal","controller stateless",
"TimeSpanFormatterSpecs","pure-controller degenerate","When_timespan_components_are_not_relevant_they_should_not_be_included_in_the_output","controller stateless",
"EquivalencyValidationContext","entity","EquivalencyValidationContext","constructor",
"EquivalencyValidationContext","entity","AsNestedMember","property non-void-command factory collaborator",
"EquivalencyValidationContext","entity","AsCollectionItem<TItem>","property non-void-command factory collaborator",
"EquivalencyValidationContext","entity","AsDictionaryItem<TKey,TExpectation>","property non-void-command factory collaborator",
"EquivalencyValidationContext","entity","Clone","property non-void-command factory collaborator",
"EquivalencyValidationContext","entity","IsCyclicReference","predicate non-void-command collaborator",
"EquivalencyValidationContext","entity","ToString","wrapper stateless",
"MultidimensionalArrayFormatter","degenerate small-class","CanHandle","collaborator incidental",
"MultidimensionalArrayFormatter","degenerate small-class","Format","controller stateless",
"AssertionScopeSpecsWithoutNamespace","pure-controller degenerate small-class","This_class_should_not_be_inside_a_namespace","controller stateless",
"AssertionScopeSpecsWithoutNamespace","pure-controller degenerate small-class","When_the_test_method_is_not_inside_a_namespace_it_should_not_throw_a_NullReferenceException","controller stateless",
"CyclicReferenceDetector","entity small-class","IsCyclicReference","predicate non-void-command collaborator",
"CyclicReferenceDetector","entity small-class","Clone","property set factory collaborator",
"ObjectReference","boundary","ObjectReference","constructor",
"ObjectReference","boundary","Equals","predicate non-void-command collaborator",
"ObjectReference","boundary","IsParentOrChildOf","controller stateless",
"ObjectReference","boundary","GetHashCode","property wrapper",
"ObjectReference","boundary","ToString","wrapper stateless",
"Iterator<T>","unclassified","Iterator","constructor",
"Iterator<T>","unclassified","Reset","command",
"Iterator<T>","unclassified","MoveNext","predicate non-void-command",
"Iterator<T>","unclassified","FetchCurrent","predicate non-void-command",
"Iterator<T>","unclassified","PrefetchNext","command",
"Iterator<T>","unclassified","Dispose","command",
"Iterator<T>","unclassified","get","get collaborator",
"Iterator<T>","unclassified","set","non-void-command collaborator",
"Iterator<T>","unclassified","get","predicate",
"StringWildcardMatchingStrategy","unclassified","ValidateAgainstMismatch","command",
"StringWildcardMatchingStrategy","unclassified","IsMatch","predicate non-void-command",
"StringWildcardMatchingStrategy","unclassified","CleanNewLines","property controller",
"StringWildcardMatchingStrategy","unclassified","get","property controller",
"Field","entity boundary small-class","Field","copy-constructor",
"Field","entity boundary small-class","Field","copy-constructor",
"Field","entity boundary small-class","GetValue","property non-void-command collaborator",
"ClassWithReadOnlyProperties","degenerate small-class","set","empty",
"EventMetadata","empty","EventMetadata","constructor",
"GenericAsyncFunctionAssertions<TResult>","entity","GenericAsyncFunctionAssertions","constructor",
"GenericAsyncFunctionAssertions<TResult>","entity","GenericAsyncFunctionAssertions","constructor",
"GenericAsyncFunctionAssertions<TResult>","entity","CompleteWithinAsync","property non-void-command factory collaborator",
"GenericAsyncFunctionAssertions<TResult>","entity","NotThrowAsync","property non-void-command factory collaborator",
"GenericAsyncFunctionAssertions<TResult>","entity","NotThrowAfterAsync","property wrapper",
"GivenSelector<T>","entity minimal-entity","GivenSelector","constructor",
"GivenSelector<T>","entity minimal-entity","ForCondition","get non-void-command collaborator",
"GivenSelector<T>","entity minimal-entity","Given<TOut>","property factory wrapper",
"GivenSelector<T>","entity minimal-entity","FailWith","property non-void-command collaborator",
"GivenSelector<T>","entity minimal-entity","FailWith","property non-void-command factory collaborator",
"GivenSelector<T>","entity minimal-entity","FailWith","property set factory collaborator",
"GivenSelector<T>","entity minimal-entity","ClearExpectation","property non-void-command factory collaborator",
"StringCollectionAssertions<TCollection>","empty","StringCollectionAssertions","constructor",
"SomeClass","empty","SomeClass","constructor",
"StreamAssertions","empty","StreamAssertions","constructor",
"Node","unclassified","Equals","predicate non-void-command collaborator",
"Node","unclassified","GetHashCode","property non-void-command",
"Node","unclassified","set","non-void-command",
"Node","unclassified","set","non-void-command",
"Node","unclassified","get","predicate",
"Node","unclassified","get","property non-void-command",
"Node","unclassified","Node","constructor",
"XDocumentAssertions","factory controller","XDocumentAssertions","constructor",
"XDocumentAssertions","factory controller","Be","property factory wrapper",
"XDocumentAssertions","factory controller","NotBe","property factory wrapper",
"XDocumentAssertions","factory controller","BeEquivalentTo","property factory controller",
"XDocumentAssertions","factory controller","NotBeEquivalentTo","property factory controller",
"XDocumentAssertions","factory controller","HaveRoot","property non-void-command collaborator",
"XDocumentAssertions","factory controller","HaveRoot","property factory controller",
"XDocumentAssertions","factory controller","HaveElement","property non-void-command collaborator",
"XDocumentAssertions","factory controller","HaveElement","property non-void-command collaborator",
"XDocumentAssertions","factory controller","HaveElement","property factory controller",
"XDocumentAssertions","factory controller","HaveElement","property factory controller",
"CulturedTheoryAttributeDiscoverer","pure-controller degenerate small-class","CulturedTheoryAttributeDiscoverer","constructor",
"CulturedTheoryAttributeDiscoverer","pure-controller degenerate small-class","CreateTestCasesForDataRow","controller stateless",
"CulturedTheoryAttributeDiscoverer","pure-controller degenerate small-class","CreateTestCasesForTheory","controller stateless",
"AssertionFailureSpecs","pure-controller","When_reason_starts_with_because_it_should_not_do_anything","controller",
"AssertionFailureSpecs","pure-controller","When_reason_does_not_start_with_because_it_should_be_added","controller",
"AssertionFailureSpecs","pure-controller","When_reason_starts_with_because_but_is_prefixed_with_blanks_it_should_not_do_anything","controller",
"AssertionFailureSpecs","pure-controller","When_reason_does_not_start_with_because_but_is_prefixed_with_blanks_it_should_add_because_after_the_blanks","controller",
"CulturedTheoryAttribute","empty","CulturedTheoryAttribute","constructor",
"CollectionSpecs","pure-controller degenerate small-class","Add","controller stateless",
"PredicateLambdaExpressionValueFormatter","pure-controller degenerate small-class","Format","controller stateless",
"MappedMemberMatchingRule<TExpectation,TSubject>","controller small-class","MappedMemberMatchingRule","constructor",
"MappedMemberMatchingRule<TExpectation,TSubject>","controller small-class","Match","property controller",
"StructuralEqualityEquivalencyStep","boundary degenerate small-class","Handle","wrapper stateless",
"TupleSpecs","pure-controller degenerate small-class","When_a_nested_member_is_a_tuple_it_should_compare_its_property_for_equivalence","controller stateless",
"TupleSpecs","pure-controller degenerate small-class","When_a_tuple_is_compared_it_should_compare_its_components","controller stateless",
"SelectMemberByPathSelectionRule","pure-controller degenerate small-class","SelectMembers","controller stateless",
"ExceptingStream","empty","ExceptingStream","constructor",
"CountingGenericCollection<TElement>","boundary lazy-class degenerate","CountingGenericCollection","constructor",
"CountingGenericCollection<TElement>","boundary lazy-class degenerate","GetEnumerator","property set collaborator",
"CountingGenericCollection<TElement>","boundary lazy-class degenerate","IEnumerable.GetEnumerator","property non-void-command collaborator",
"CountingGenericCollection<TElement>","boundary lazy-class degenerate","Add","collaborator stateless",
"CountingGenericCollection<TElement>","boundary lazy-class degenerate","Clear","stateless",
"CountingGenericCollection<TElement>","boundary lazy-class degenerate","Contains","collaborator stateless",
"CountingGenericCollection<TElement>","boundary lazy-class degenerate","CopyTo","stateless",
"CountingGenericCollection<TElement>","boundary lazy-class degenerate","Remove","collaborator stateless",
"CountingGenericCollection<TElement>","boundary lazy-class degenerate","get","get set",
"PropertyInfoFormatter","degenerate small-class","CanHandle","collaborator incidental",
"PropertyInfoFormatter","degenerate small-class","Format","controller stateless",
"ByteArrayOrderingRule","pure-controller degenerate small-class","Evaluate","controller stateless",
"ByteArrayOrderingRule","pure-controller degenerate small-class","ToString","incidental",
"BufferedStreamAssertions","empty","BufferedStreamAssertions","constructor",
"CulturedXunitTheoryTestCaseRunner","entity boundary small-class","CulturedXunitTheoryTestCaseRunner","constructor",
"CulturedXunitTheoryTestCaseRunner","entity boundary small-class","AfterTestCaseStartingAsync","property non-void-command collaborator",
"CulturedXunitTheoryTestCaseRunner","entity boundary small-class","BeforeTestCaseFinishedAsync","property non-void-command collaborator",
"IncludeMemberByPathSelectionRule","small-class","IncludeMemberByPathSelectionRule","constructor",
"IncludeMemberByPathSelectionRule","small-class","AddOrRemoveMembersFrom","void-accessor command collaborator",
"IncludeMemberByPathSelectionRule","small-class","ToString","property",
"GenericEnumerableEquivalencyStep","entity boundary small-class","Handle","property non-void-command collaborator",
"Failure","empty","Failure","constructor",
"CollectionMemberOrderingRuleDecorator","small-class","CollectionMemberOrderingRuleDecorator","constructor",
"CollectionMemberOrderingRuleDecorator","small-class","Evaluate","property non-void-command collaborator",
"CollectionMemberOrderingRuleDecorator","small-class","ToString","property non-void-command",
"XElementEquivalencyStep","pure-controller degenerate small-class","OnHandle","controller stateless",
"XElementValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"XElementValueFormatter","degenerate small-class","Format","controller stateless",
"Property","small-class","Property","copy-constructor",
"Property","small-class","Property","copy-constructor",
"Property","small-class","GetValue","property non-void-command collaborator",
"Property","small-class","get","get non-void-command",
"AllPropertiesSelectionRule","pure-controller degenerate small-class","SelectMembers","controller stateless",
"AllPropertiesSelectionRule","pure-controller degenerate small-class","ToString","incidental",
"TaskCompletionSourceAssertions<T>","entity factory controller small-class","TaskCompletionSourceAssertions","constructor",
"TaskCompletionSourceAssertions<T>","entity factory controller small-class","TaskCompletionSourceAssertions","constructor",
"TaskCompletionSourceAssertions<T>","entity factory controller small-class","CompleteWithinAsync","property non-void-command factory collaborator",
"TaskCompletionSourceAssertions<T>","entity factory controller small-class","NotCompleteWithinAsync","property non-void-command factory collaborator",
"AndWhichConstraint<TParentConstraint,TMatchedElement>","empty","AndWhichConstraint","constructor",
"AndWhichConstraint<TParentConstraint,TMatchedElement>","empty","AndWhichConstraint","constructor",
"ExcludeMemberByPredicateSelectionRule","small-class","ExcludeMemberByPredicateSelectionRule","constructor",
"ExcludeMemberByPredicateSelectionRule","small-class","SelectMembers","controller stateless",
"ExcludeMemberByPredicateSelectionRule","small-class","ToString","property",
"NullableBooleanAssertions<TAssertions>","entity factory controller","NullableBooleanAssertions","constructor",
"NullableBooleanAssertions<TAssertions>","entity factory controller","HaveValue","property factory wrapper",
"NullableBooleanAssertions<TAssertions>","entity factory controller","NotBeNull","property non-void-command collaborator",
"NullableBooleanAssertions<TAssertions>","entity factory controller","NotHaveValue","property factory wrapper",
"NullableBooleanAssertions<TAssertions>","entity factory controller","BeNull","property non-void-command collaborator",
"NullableBooleanAssertions<TAssertions>","entity factory controller","Be","property factory wrapper",
"NullableBooleanAssertions<TAssertions>","entity factory controller","NotBe","property factory wrapper",
"NullableBooleanAssertions<TAssertions>","entity factory controller","NotBeFalse","property factory wrapper",
"NullableBooleanAssertions<TAssertions>","entity factory controller","NotBeTrue","property factory wrapper",
"ClassWithSomeAttributeThatImplementsSomeInterface","degenerate small-class","Method2","empty",
"TestClassForMethodSelectorWithNonInheritableAttributeDerived","degenerate small-class","PublicVirtualVoidMethodWithAttribute","empty",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","SelfReferenceEquivalencyOptions","constructor",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","SelfReferenceEquivalencyOptions","constructor",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IncludingAllDeclaredProperties","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IncludingAllRuntimeProperties","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IncludingFields","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IncludingInternalFields","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ExcludingFields","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IncludingProperties","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IncludingInternalProperties","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ExcludingProperties","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ExcludingNonBrowsableMembers","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IgnoringNonBrowsableMembersOnSubject","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","RespectingRuntimeTypes","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","RespectingDeclaredTypes","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","Excluding","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","Including","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ExcludingMissingMembers","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ThrowingOnMissingMembers","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","Using<TProperty>","property factory collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IncludingNestedObjects","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ExcludingNestedObjects","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IgnoringCyclicReferences","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","AllowingInfiniteRecursion","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","WithoutSelectionRules","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","WithoutMatchingRules","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","Using","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","Using","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","Using","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","Using","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","Using<T,TEqualityComparer>","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","Using<T>","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","Using","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","WithStrictOrdering","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","WithStrictOrderingFor","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","WithoutStrictOrdering","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","WithoutStrictOrderingFor","property collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ComparingEnumsByName","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ComparingEnumsByValue","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ComparingRecordsByValue","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ComparingRecordsByMembers","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ComparingByMembers","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ComparingByValue","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","WithTracing","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","WithAutoConversion","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","WithAutoConversionFor","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","WithoutAutoConversionFor","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IgnoringLeadingWhitespace","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IgnoringTrailingWhitespace","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IgnoringCase","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","IgnoringNewlineStyle","property set collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","GetStringComparerOrDefault","property collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","ToString","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","RemoveSelectionRule<T>","command",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","AddSelectionRule","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","AddMatchingRule","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","AddOrderingRule","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","AddEquivalencyStep","property non-void-command collaborator",
"SelfReferenceEquivalencyOptions<TSelf>","entity boundary","get","property non-void-command factory collaborator",
"InvokingFunctionSpecs","pure-controller degenerate small-class","Invoking_on_null_is_not_allowed","controller stateless",
"InvokingFunctionSpecs","pure-controller degenerate small-class","Invoking_with_null_is_not_allowed","controller stateless",
"MemberToMemberInfoAdapter","empty","MemberToMemberInfoAdapter","constructor",
"AssertionContext<TSubject>","empty","AssertionContext","constructor",
"NullableNumericAssertions<T>","empty","NullableNumericAssertions","constructor",
"NullableNumericAssertions<T,TAssertions>","controller","NullableNumericAssertions","constructor",
"NullableNumericAssertions<T,TAssertions>","controller","HaveValue","property factory wrapper",
"NullableNumericAssertions<T,TAssertions>","controller","NotBeNull","property non-void-command collaborator",
"NullableNumericAssertions<T,TAssertions>","controller","NotHaveValue","property factory wrapper",
"NullableNumericAssertions<T,TAssertions>","controller","BeNull","property non-void-command collaborator",
"NullableNumericAssertions<T,TAssertions>","controller","Match","property factory controller",
"NullableUInt16Assertions","pure-controller degenerate small-class","NullableUInt16Assertions","constructor",
"NullableUInt16Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"AssertionResultSet","entity boundary","AddSet","incidental",
"AssertionResultSet","entity boundary","SelectClosestMatchFor","property non-void-command collaborator",
"AssertionResultSet","entity boundary","GetBestResultSets","property non-void-command collaborator",
"NumericAssertions<T>","empty","NumericAssertions","constructor",
"NumericAssertions<T,TAssertions>","factory controller","NumericAssertions","constructor",
"NumericAssertions<T,TAssertions>","factory controller","NumericAssertions","constructor",
"NumericAssertions<T,TAssertions>","factory controller","Be","property non-void-command factory collaborator",
"NumericAssertions<T,TAssertions>","factory controller","Be","property non-void-command factory collaborator",
"NumericAssertions<T,TAssertions>","factory controller","NotBe","property factory wrapper",
"NumericAssertions<T,TAssertions>","factory controller","NotBe","property factory wrapper",
"NumericAssertions<T,TAssertions>","factory controller","BePositive","property factory wrapper",
"NumericAssertions<T,TAssertions>","factory controller","BeNegative","property factory wrapper",
"NumericAssertions<T,TAssertions>","factory controller","BeLessThan","property non-void-command factory collaborator",
"NumericAssertions<T,TAssertions>","factory controller","BeLessThanOrEqualTo","property non-void-command factory collaborator",
"NumericAssertions<T,TAssertions>","factory controller","BeGreaterThan","property non-void-command factory collaborator",
"NumericAssertions<T,TAssertions>","factory controller","BeGreaterThanOrEqualTo","property non-void-command factory collaborator",
"NumericAssertions<T,TAssertions>","factory controller","BeInRange","property factory wrapper",
"NumericAssertions<T,TAssertions>","factory controller","NotBeInRange","property factory wrapper",
"NumericAssertions<T,TAssertions>","factory controller","BeOneOf","wrapper stateless",
"NumericAssertions<T,TAssertions>","factory controller","BeOneOf","property factory wrapper",
"NumericAssertions<T,TAssertions>","factory controller","BeOfType","property non-void-command factory collaborator",
"NumericAssertions<T,TAssertions>","factory controller","NotBeOfType","property non-void-command factory collaborator",
"NumericAssertions<T,TAssertions>","factory controller","Match","property factory controller",
"NumericAssertions<T,TAssertions>","factory controller","GenerateDifferenceMessage","property collaborator",
"SByteAssertions","pure-controller degenerate small-class","SByteAssertions","constructor",
"SByteAssertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"SingleAssertions","pure-controller degenerate small-class","SingleAssertions","constructor",
"SingleAssertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_getting_the_subject_it_should_remain_unchanged","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_when_expecting_an_exception_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_when_not_expecting_a_generic_exception_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_when_not_expecting_an_exception_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_an_empty_AggregateException_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_a_nested_AggregateException_it_should_provide_the_message","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_a_flat_AggregateException_it_should_provide_the_message","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_a_nested_AggregateException_it_should_provide_unwrapped_exception_to_predicate","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_a_flat_AggregateException_it_should_provide_it_to_predicate","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_the_expected_exception_is_wrapped_async_it_should_succeed<T>","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_the_expected_exception_is_wrapped_on_UI_thread_async_it_should_succeed<T>","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_the_expected_exception_is_not_wrapped_async_it_should_fail<T>","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_the_expected_exception_is_not_wrapped_on_UI_thread_async_it_should_fail<T>","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_throws_subclass_of_expected_exact_exception_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_ValueTask_throws_subclass_of_expected_exact_exception_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_throws_aggregate_exception_and_not_expected_exact_exception_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_throws_aggregate_exception_and_not_expected_exact_exception_through_ValueTask_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_throws_the_expected_exact_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_throws_the_expected_exact_exception_through_ValueTask_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_expected_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_expected_exception_through_ValueTask_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_it_should_be_null","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_async_expected_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_does_not_throw_expected_exception_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_does_not_throw_expected_exception_through_ValueTask_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_unexpected_exception_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_unexpected_exception_through_ValueTask_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_does_not_throw_exception_and_that_was_expected_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_does_not_throw_exception_through_ValueTask_and_that_was_expected_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_does_not_throw_async_exception_and_that_was_expected_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_throws_subclass_of_expected_async_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_of_task_int_in_async_method_throws_the_expected_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_of_task_int_in_async_method_throws_not_excepted_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_when_expecting_an_exact_exception_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_throws_subclass_of_expected_async_exact_exception_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_throws_aggregate_exception_instead_of_exact_exception_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_throws_expected_async_exact_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_exception_and_no_exception_was_expected_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_exception_through_ValueTask_and_no_exception_was_expected_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_exception_and_expected_not_to_throw_another_one_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_exception_through_ValueTask_and_expected_not_to_throw_another_one_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_exception_and_expected_not_to_throw_async_another_one_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_succeeds_and_expected_not_to_throw_particular_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_succeeds_and_expected_not_to_throw_particular_exception_through_ValueTask_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_exception_expected_not_to_be_thrown_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_exception_expected_through_ValueTask_not_to_be_thrown_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_of_T_succeeds_and_expected_not_to_throw_particular_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_ValueTask_async_method_of_T_succeeds_and_expected_not_to_throw_particular_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_of_T_throws_exception_expected_not_to_be_thrown_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_ValueTask_async_method_of_T_throws_exception_expected_not_to_be_thrown_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_the_expected_inner_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_the_expected_inner_exception_from_argument_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_the_expected_inner_exception_exactly_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_the_expected_inner_exception_exactly_defined_in_arguments_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_aggregate_exception_containing_expected_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_throws_the_expected_exception_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_does_not_throw_the_expected_inner_exception_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_does_not_throw_the_expected_inner_exception_from_argument_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_does_not_throw_the_expected_inner_exception_exactly_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_does_not_throw_the_expected_inner_exception_exactly_defined_in_arguments_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_async_method_does_not_throw_the_expected_exception_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_asserting_async_void_method_should_throw_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_asserting_async_void_method_should_throw_exactly_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_asserting_async_void_method_should_not_throw_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_asserting_async_void_method_should_not_throw_specific_exception_it_should_fail","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_a_method_throws_with_a_matching_parameter_name_it_should_succeed","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_a_method_throws_with_a_non_matching_parameter_name_it_should_fail_with_a_descriptive_message","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_wait_time_is_zero_for_async_func_executed_with_wait_it_should_not_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_poll_interval_is_zero_for_async_func_executed_with_wait_it_should_not_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_for_async_func_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_wait_time_is_negative_for_async_func_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_poll_interval_is_negative_for_async_func_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_no_exception_should_be_thrown_for_null_async_func_after_wait_time_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_no_exception_should_be_thrown_for_async_func_after_wait_time_but_it_was_it_should_throw","controller stateless",
"AsyncFunctionExceptionAssertionSpecs","pure-controller degenerate","When_no_exception_should_be_thrown_for_async_func_after_wait_time_and_none_was_it_should_not_throw","controller stateless",
"UInt16Assertions","pure-controller degenerate small-class","UInt16Assertions","constructor",
"UInt16Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"GenericCollectionAssertions<TCollection,T>","empty","GenericCollectionAssertions","constructor",
"DelegateAssertionSpecs","pure-controller degenerate small-class","Null_clock_throws_exception","controller stateless",
"MultidimensionalArrayFormatterSpecs","pure-controller degenerate small-class","When_formatting_a_multi_dimensional_array_it_should_show_structure","controller stateless",
"StringAssertions","empty","StringAssertions","constructor",
"BooleanAssertions","empty","BooleanAssertions","constructor",
"BooleanAssertions<TAssertions>","factory controller","BooleanAssertions","constructor",
"BooleanAssertions<TAssertions>","factory controller","BeFalse","property factory wrapper",
"BooleanAssertions<TAssertions>","factory controller","BeTrue","property factory wrapper",
"BooleanAssertions<TAssertions>","factory controller","Be","property factory wrapper",
"BooleanAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"BooleanAssertions<TAssertions>","factory controller","Imply","property factory wrapper",
"NullableTimeOnlyAssertions<TAssertions>","entity","NullableTimeOnlyAssertions","constructor",
"NullableTimeOnlyAssertions<TAssertions>","entity","HaveValue","property factory wrapper",
"NullableTimeOnlyAssertions<TAssertions>","entity","NotBeNull","property non-void-command collaborator",
"NullableTimeOnlyAssertions<TAssertions>","entity","NotHaveValue","property factory wrapper",
"NullableTimeOnlyAssertions<TAssertions>","entity","BeNull","property non-void-command collaborator",
"DateOnlyAssertions","empty","DateOnlyAssertions","constructor",
"DateOnlyAssertions<TAssertions>","factory controller","DateOnlyAssertions","constructor",
"DateOnlyAssertions<TAssertions>","factory controller","Be","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","Be","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","BeBefore","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","NotBeBefore","property non-void-command collaborator",
"DateOnlyAssertions<TAssertions>","factory controller","BeOnOrBefore","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","NotBeOnOrBefore","property non-void-command collaborator",
"DateOnlyAssertions<TAssertions>","factory controller","BeAfter","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","NotBeAfter","property non-void-command collaborator",
"DateOnlyAssertions<TAssertions>","factory controller","BeOnOrAfter","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","NotBeOnOrAfter","property non-void-command collaborator",
"DateOnlyAssertions<TAssertions>","factory controller","HaveYear","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","NotHaveYear","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","HaveMonth","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","NotHaveMonth","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","HaveDay","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","NotHaveDay","property factory wrapper",
"DateOnlyAssertions<TAssertions>","factory controller","BeOneOf","wrapper stateless",
"DateOnlyAssertions<TAssertions>","factory controller","BeOneOf","property non-void-command collaborator",
"DateOnlyAssertions<TAssertions>","factory controller","BeOneOf","property non-void-command collaborator",
"DateOnlyAssertions<TAssertions>","factory controller","BeOneOf","property factory controller",
"DateTimeOffsetAssertions","empty","DateTimeOffsetAssertions","constructor",
"DateTimeOffsetAssertions<TAssertions>","factory controller","DateTimeOffsetAssertions","constructor",
"DateTimeOffsetAssertions<TAssertions>","factory controller","Be","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","Be","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeExactly","property non-void-command factory collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeExactly","property non-void-command factory collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotBeExactly","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotBeExactly","property non-void-command factory collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeCloseTo","property factory controller",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotBeCloseTo","property factory controller",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeBefore","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotBeBefore","property non-void-command collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeOnOrBefore","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotBeOnOrBefore","property non-void-command collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeAfter","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotBeAfter","property non-void-command collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeOnOrAfter","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotBeOnOrAfter","property non-void-command collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","HaveYear","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotHaveYear","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","HaveMonth","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotHaveMonth","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","HaveDay","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotHaveDay","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","HaveHour","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotHaveHour","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","HaveMinute","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotHaveMinute","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","HaveSecond","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotHaveSecond","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","HaveOffset","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotHaveOffset","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeMoreThan","property factory collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeAtLeast","property factory collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeExactly","property factory collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeWithin","property factory collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeLessThan","property factory collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeSameDateAs","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","NotBeSameDateAs","property factory wrapper",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeOneOf","wrapper stateless",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeOneOf","property non-void-command collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeOneOf","property non-void-command collaborator",
"DateTimeOffsetAssertions<TAssertions>","factory controller","BeOneOf","property factory controller",
"DateTimeOffsetRangeAssertions<TAssertions>","entity factory controller small-class","DateTimeOffsetRangeAssertions","constructor",
"DateTimeOffsetRangeAssertions<TAssertions>","entity factory controller small-class","Before","property non-void-command factory collaborator",
"DateTimeOffsetRangeAssertions<TAssertions>","entity factory controller small-class","After","property non-void-command factory collaborator",
"CulturedFactAttributeDiscoverer","controller small-class","CulturedFactAttributeDiscoverer","constructor",
"CulturedFactAttributeDiscoverer","controller small-class","Discover","property controller",
"CustomerType","small-class","CustomerType","constructor",
"CustomerType","small-class","Equals","predicate collaborator",
"CustomerType","small-class","GetHashCode","property non-void-command",
"EnumAssertions<TEnum,TAssertions>","factory controller","EnumAssertions","constructor",
"EnumAssertions<TEnum,TAssertions>","factory controller","EnumAssertions","constructor",
"EnumAssertions<TEnum,TAssertions>","factory controller","Be","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","Be","property non-void-command factory collaborator",
"EnumAssertions<TEnum,TAssertions>","factory controller","NotBe","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","NotBe","property non-void-command factory collaborator",
"EnumAssertions<TEnum,TAssertions>","factory controller","BeDefined","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","NotBeDefined","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","HaveValue","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","NotHaveValue","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","HaveSameValueAs<T>","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","NotHaveSameValueAs<T>","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","HaveSameNameAs<T>","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","NotHaveSameNameAs<T>","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","HaveFlag","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","NotHaveFlag","property factory wrapper",
"EnumAssertions<TEnum,TAssertions>","factory controller","Match","property factory controller",
"EnumAssertions<TEnum,TAssertions>","factory controller","BeOneOf","wrapper stateless",
"EnumAssertions<TEnum,TAssertions>","factory controller","BeOneOf","property factory controller",
"InvokingActionSpecs","pure-controller degenerate small-class","Invoking_on_null_is_not_allowed","controller stateless",
"InvokingActionSpecs","pure-controller degenerate small-class","Invoking_with_null_is_not_allowed","controller stateless",
"GuidAssertions","empty","GuidAssertions","constructor",
"ExcludeNonBrowsableMembersRule","pure-controller degenerate small-class","SelectMembers","controller stateless",
"FluentActionsSpecs","boundary degenerate","Invoking_works_with_action","wrapper stateless",
"FluentActionsSpecs","boundary degenerate","Invoking_works_with_func","wrapper stateless",
"FluentActionsSpecs","boundary degenerate","Awaiting_works_with_action","wrapper stateless",
"FluentActionsSpecs","boundary degenerate","Awaiting_works_with_func","wrapper stateless",
"FluentActionsSpecs","boundary degenerate","Enumerating_works_with_general","wrapper stateless",
"FluentActionsSpecs","boundary degenerate","Enumerating_works_with_specialized","wrapper stateless",
"FluentActionsSpecs","boundary degenerate","Enumerating_works_with_enumerable_func","controller stateless",
"EnumEqualityStep","factory pure-controller degenerate small-class","Handle","factory controller stateless",
"HttpResponseMessageAssertions","empty","HttpResponseMessageAssertions","constructor",
"DelegateAssertions<TDelegate,TAssertions>","entity","DelegateAssertions","constructor",
"DelegateAssertions<TDelegate,TAssertions>","entity","DelegateAssertions","constructor",
"DelegateAssertions<TDelegate,TAssertions>","entity","Throw<TException>","property non-void-command factory collaborator",
"DelegateAssertions<TDelegate,TAssertions>","entity","NotThrow<TException>","property non-void-command factory collaborator",
"DelegateAssertions<TDelegate,TAssertions>","entity","ThrowExactly<TException>","property non-void-command factory collaborator",
"DelegateAssertions<TDelegate,TAssertions>","entity","InvokeSubjectWithInterception","wrapper stateless",
"DelegateAssertions<TDelegate,TAssertions>","entity","FailIfSubjectIsAsyncVoid","command",
"MiscellaneousExceptionSpecs","pure-controller degenerate","When_getting_value_of_property_of_thrown_exception_it_should_return_value_of_property","controller stateless",
"MiscellaneousExceptionSpecs","pure-controller degenerate","When_validating_a_subject_against_multiple_conditions_it_should_support_chaining","controller stateless",
"MiscellaneousExceptionSpecs","pure-controller degenerate","When_a_yielding_enumerable_throws_an_expected_exception_it_should_not_throw","controller stateless",
"MiscellaneousExceptionSpecs","pure-controller degenerate","When_custom_condition_is_not_met_it_should_throw","controller stateless",
"MiscellaneousExceptionSpecs","pure-controller degenerate","When_a_2nd_condition_is_not_met_it_should_throw","controller stateless",
"MiscellaneousExceptionSpecs","pure-controller degenerate","When_custom_condition_is_met_it_should_not_throw","controller stateless",
"MiscellaneousExceptionSpecs","pure-controller degenerate","When_two_exceptions_are_thrown_and_the_assertion_assumes_there_can_only_be_one_it_should_fail","controller stateless",
"MiscellaneousExceptionSpecs","pure-controller degenerate","When_an_exception_of_a_different_type_is_thrown_it_should_include_the_type_of_the_thrown_exception","controller stateless",
"MiscellaneousExceptionSpecs","pure-controller degenerate","When_a_method_throws_with_a_matching_parameter_name_it_should_succeed","controller stateless",
"MiscellaneousExceptionSpecs","pure-controller degenerate","When_a_method_throws_with_a_non_matching_parameter_name_it_should_fail_with_a_descriptive_message","controller stateless",
"ObjectCastingSpecs","pure-controller degenerate small-class","When_casting_an_object_using_the_as_operator_it_should_return_the_expected_type","controller stateless",
"NullableBooleanAssertions","empty","NullableBooleanAssertions","constructor",
"TypeSelectorSpecs","pure-controller degenerate","When_type_selector_is_created_with_a_null_type_it_should_throw","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_type_selector_is_created_with_a_null_type_list_it_should_throw","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_type_selector_is_null_then_should_should_throw","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_derive_from_a_specific_class_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_derive_from_a_specific_generic_class_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_do_not_derive_from_a_specific_class_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_do_not_derive_from_a_specific_generic_class_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_implement_a_specific_interface_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_do_not_implement_a_specific_interface_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_decorated_with_a_specific_attribute_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_not_decorated_with_a_specific_attribute_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_from_specific_namespace_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_other_than_from_specific_namespace_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_from_specific_namespace_or_sub_namespaces_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_other_than_from_specific_namespace_or_sub_namespaces_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_combining_type_selection_filters_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_using_the_single_type_ctor_of_TypeSelector_it_should_contain_that_singe_type","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_decorated_with_an_inheritable_attribute_it_should_only_return_the_applicable_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_decorated_with_or_inheriting_an_inheritable_attribute_it_should_only_return_the_applicable_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_not_decorated_with_an_inheritable_attribute_it_should_only_return_the_applicable_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_not_decorated_with_or_inheriting_an_inheritable_attribute_it_should_only_return_the_applicable_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_decorated_with_a_noninheritable_attribute_it_should_only_return_the_applicable_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_decorated_with_or_inheriting_a_noninheritable_attribute_it_should_only_return_the_applicable_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_not_decorated_with_a_noninheritable_attribute_it_should_only_return_the_applicable_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_not_decorated_with_or_inheriting_a_noninheritable_attribute_it_should_only_return_the_applicable_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_global_types_from_global_namespace_it_should_succeed","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_global_types_not_from_global_namespace_it_should_succeed","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_local_types_from_global_namespace_it_should_succeed","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_local_types_not_from_global_namespace_it_should_succeed","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_a_prefix_of_a_namespace_it_should_not_match","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_deselecting_a_prefix_of_a_namespace_it_should_not_match","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_classes_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_not_classes_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_value_types_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_not_value_types_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_abstract_classes_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_not_abstract_classes_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_sealed_classes_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_not_sealed_classes_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_static_classes_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_not_static_classes_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_with_predicate_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_unwrap_task_types_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_unwrap_enumerable_types_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_interfaces_it_should_return_the_correct_types","controller stateless",
"TypeSelectorSpecs","pure-controller degenerate","When_selecting_types_that_are_not_interfaces_it_should_return_the_correct_types","controller stateless",
"HaveLength","pure-controller degenerate","When_a_stream_has_the_expected_length_it_should_succeed","controller stateless",
"HaveLength","pure-controller degenerate","When_a_stream_has_an_unexpected_length_it_should_fail","controller stateless",
"HaveLength","pure-controller degenerate","When_null_have_length_should_fail","controller stateless",
"HaveLength","pure-controller degenerate","When_a_throwing_stream_should_have_a_length_it_should_fail","controller stateless",
"NullableDateOnlyAssertions","empty","NullableDateOnlyAssertions","constructor",
"NullableDateOnlyAssertions<TAssertions>","entity","NullableDateOnlyAssertions","constructor",
"NullableDateOnlyAssertions<TAssertions>","entity","HaveValue","property factory wrapper",
"NullableDateOnlyAssertions<TAssertions>","entity","NotBeNull","property non-void-command collaborator",
"NullableDateOnlyAssertions<TAssertions>","entity","NotHaveValue","property factory wrapper",
"NullableDateOnlyAssertions<TAssertions>","entity","BeNull","property non-void-command collaborator",
"NullableDateTimeAssertions","empty","NullableDateTimeAssertions","constructor",
"NullableDateTimeAssertions<TAssertions>","entity","NullableDateTimeAssertions","constructor",
"NullableDateTimeAssertions<TAssertions>","entity","HaveValue","property factory wrapper",
"NullableDateTimeAssertions<TAssertions>","entity","NotBeNull","property non-void-command collaborator",
"NullableDateTimeAssertions<TAssertions>","entity","NotHaveValue","property factory wrapper",
"NullableDateTimeAssertions<TAssertions>","entity","BeNull","property non-void-command collaborator",
"NumericAssertionSpecs","pure-controller degenerate small-class","When_chaining_constraints_with_and_should_not_throw","controller stateless",
"NumericAssertionSpecs","pure-controller degenerate small-class","Should_throw_a_helpful_error_when_accidentally_using_equals","controller stateless",
"PropertyInfoSelectorAssertions","entity","PropertyInfoSelectorAssertions","constructor",
"PropertyInfoSelectorAssertions","entity","BeVirtual","property non-void-command factory collaborator",
"PropertyInfoSelectorAssertions","entity","NotBeVirtual","property non-void-command factory collaborator",
"PropertyInfoSelectorAssertions","entity","BeWritable","property non-void-command factory collaborator",
"PropertyInfoSelectorAssertions","entity","NotBeWritable","property non-void-command factory collaborator",
"PropertyInfoSelectorAssertions","entity","GetAllReadOnlyPropertiesFromSelection","property non-void-command collaborator",
"PropertyInfoSelectorAssertions","entity","GetAllWritablePropertiesFromSelection","property non-void-command collaborator",
"PropertyInfoSelectorAssertions","entity","GetAllNonVirtualPropertiesFromSelection","property non-void-command collaborator",
"PropertyInfoSelectorAssertions","entity","GetAllVirtualPropertiesFromSelection","property non-void-command collaborator",
"PropertyInfoSelectorAssertions","entity","BeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"PropertyInfoSelectorAssertions","entity","NotBeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"PropertyInfoSelectorAssertions","entity","GetPropertiesWithout<TAttribute>","property non-void-command collaborator",
"PropertyInfoSelectorAssertions","entity","GetPropertiesWith<TAttribute>","property non-void-command collaborator",
"NullableDateTimeOffsetAssertions","empty","NullableDateTimeOffsetAssertions","constructor",
"NullableEnumAssertions<TEnum>","empty","NullableEnumAssertions","constructor",
"NullableGuidAssertions","empty","NullableGuidAssertions","constructor",
"NullableGuidAssertions<TAssertions>","entity","NullableGuidAssertions","constructor",
"NullableGuidAssertions<TAssertions>","entity","HaveValue","property factory wrapper",
"NullableGuidAssertions<TAssertions>","entity","NotBeNull","property non-void-command collaborator",
"NullableGuidAssertions<TAssertions>","entity","NotHaveValue","property factory wrapper",
"NullableGuidAssertions<TAssertions>","entity","BeNull","property non-void-command collaborator",
"NullableGuidAssertions<TAssertions>","entity","Be","property factory wrapper",
"NullableSimpleTimeSpanAssertions","empty","NullableSimpleTimeSpanAssertions","constructor",
"EquivalencyValidator","unclassified","AssertEquality","void-accessor command collaborator",
"EquivalencyValidator","unclassified","RecursivelyAssertEquality","void-accessor command collaborator",
"EquivalencyValidator","unclassified","TryToProveNodesAreEquivalent","controller",
"ValueObject","small-class","ValueObject","constructor",
"ValueObject","small-class","Equals","predicate collaborator",
"ValueObject","small-class","GetHashCode","property non-void-command",
"NullableSimpleTimeSpanAssertions<TAssertions>","entity","NullableSimpleTimeSpanAssertions","constructor",
"NullableSimpleTimeSpanAssertions<TAssertions>","entity","HaveValue","property factory wrapper",
"NullableSimpleTimeSpanAssertions<TAssertions>","entity","NotBeNull","property non-void-command collaborator",
"NullableSimpleTimeSpanAssertions<TAssertions>","entity","NotHaveValue","property factory wrapper",
"NullableSimpleTimeSpanAssertions<TAssertions>","entity","BeNull","property non-void-command collaborator",
"NullableSimpleTimeSpanAssertions<TAssertions>","entity","Be","property factory wrapper",
"NullableTimeOnlyAssertions","empty","NullableTimeOnlyAssertions","constructor",
"SimpleTimeSpanAssertions","empty","SimpleTimeSpanAssertions","constructor",
"MessageBuilder","unclassified","MessageBuilder","constructor",
"MessageBuilder","unclassified","Build","property non-void-command",
"MessageBuilder","unclassified","FormatArgumentPlaceholders","property controller",
"MessageBuilder","unclassified","SanitizeReason","property non-void-command",
"MessageBuilder","unclassified","EnsurePrefix","property non-void-command",
"MessageBuilder","unclassified","ExtractLeadingBlanksFrom","property controller",
"MessageBuilder","unclassified","StartsWithBlank","predicate non-void-command",
"StringAssertions<TAssertions>","factory controller","StringAssertions","constructor",
"StringAssertions<TAssertions>","factory controller","Be","property factory controller",
"StringAssertions<TAssertions>","factory controller","BeOneOf","wrapper stateless",
"StringAssertions<TAssertions>","factory controller","BeOneOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","BeEquivalentTo","property factory controller",
"StringAssertions<TAssertions>","factory controller","BeEquivalentTo","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotBeEquivalentTo","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","NotBeEquivalentTo","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","Match","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotMatch","property factory controller",
"StringAssertions<TAssertions>","factory controller","MatchEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","MatchEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotMatchEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotMatchEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","MatchRegex","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","MatchRegex","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","MatchRegex","property factory controller",
"StringAssertions<TAssertions>","factory controller","MatchRegex","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotMatchRegex","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","NotMatchRegex","property factory controller",
"StringAssertions<TAssertions>","factory controller","StartWith","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotStartWith","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","StartWithEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","StartWithEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotStartWithEquivalentOf","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","NotStartWithEquivalentOf","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","EndWith","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotEndWith","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","EndWithEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","EndWithEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotEndWithEquivalentOf","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","NotEndWithEquivalentOf","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","Contain","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","Contain","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","ContainEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","ContainEquivalentOf","property non-void-command collaborator",
"StringAssertions<TAssertions>","factory controller","ContainEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","ContainEquivalentOf","property factory controller",
"StringAssertions<TAssertions>","factory controller","ContainAll","property factory controller",
"StringAssertions<TAssertions>","factory controller","ContainAll","wrapper stateless",
"StringAssertions<TAssertions>","factory controller","ContainAny","property factory controller",
"StringAssertions<TAssertions>","factory controller","ContainAny","wrapper stateless",
"StringAssertions<TAssertions>","factory controller","NotContain","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","NotContainAll","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotContainAll","wrapper stateless",
"StringAssertions<TAssertions>","factory controller","NotContainAny","property factory controller",
"StringAssertions<TAssertions>","factory controller","NotContainAny","wrapper stateless",
"StringAssertions<TAssertions>","factory controller","NotContainEquivalentOf","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","NotContainEquivalentOf","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","BeEmpty","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","NotBeEmpty","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","HaveLength","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","NotBeNullOrEmpty","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","BeNullOrEmpty","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","NotBeNullOrWhiteSpace","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","BeNullOrWhiteSpace","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","BeUpperCased","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","NotBeUpperCased","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","BeLowerCased","property non-void-command factory collaborator",
"StringAssertions<TAssertions>","factory controller","NotBeLowerCased","property factory wrapper",
"StringAssertions<TAssertions>","factory controller","Be","property factory controller",
"StringEqualityStrategy","unclassified","StringEqualityStrategy","constructor",
"StringEqualityStrategy","unclassified","ValidateAgainstMismatch","command",
"StringEqualityStrategy","unclassified","ValidateAgainstSuperfluousWhitespace","command",
"StringEqualityStrategy","unclassified","ValidateAgainstLengthDifferences","predicate non-void-command",
"StringEqualityStrategy","unclassified","GetMismatchSegmentForStringsOfDifferentLengths","property controller",
"StringValidator","small-class","StringValidator","constructor",
"StringValidator","small-class","Validate","command",
"StringValidator","small-class","ValidateAgainstNulls","predicate non-void-command",
"MatchAllOrderingRule","degenerate small-class","Evaluate","collaborator incidental",
"MatchAllOrderingRule","degenerate small-class","ToString","incidental",
"StringValidatorSupportingNull","commander data-class small-class","StringValidatorSupportingNull","constructor",
"StringValidatorSupportingNull","commander data-class small-class","Validate","set",
"TimeOnlyAssertions","empty","TimeOnlyAssertions","constructor",
"TimeOnlyAssertions<TAssertions>","factory controller","TimeOnlyAssertions","constructor",
"TimeOnlyAssertions<TAssertions>","factory controller","Be","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","Be","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","BeCloseTo","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotBeCloseTo","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","BeBefore","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotBeBefore","property non-void-command collaborator",
"TimeOnlyAssertions<TAssertions>","factory controller","BeOnOrBefore","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotBeOnOrBefore","property non-void-command collaborator",
"TimeOnlyAssertions<TAssertions>","factory controller","BeAfter","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotBeAfter","property non-void-command collaborator",
"TimeOnlyAssertions<TAssertions>","factory controller","BeOnOrAfter","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotBeOnOrAfter","property non-void-command collaborator",
"TimeOnlyAssertions<TAssertions>","factory controller","HaveHours","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotHaveHours","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","HaveMinutes","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotHaveMinutes","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","HaveSeconds","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotHaveSeconds","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","HaveMilliseconds","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","NotHaveMilliseconds","property factory wrapper",
"TimeOnlyAssertions<TAssertions>","factory controller","BeOneOf","wrapper stateless",
"TimeOnlyAssertions<TAssertions>","factory controller","BeOneOf","property non-void-command collaborator",
"TimeOnlyAssertions<TAssertions>","factory controller","BeOneOf","property non-void-command collaborator",
"TimeOnlyAssertions<TAssertions>","factory controller","BeOneOf","property factory controller",
"NullableInt16Assertions","pure-controller degenerate small-class","NullableInt16Assertions","constructor",
"NullableInt16Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"AsyncFunctionAssertions<TTask,TAssertions>","entity factory controller","AsyncFunctionAssertions","constructor",
"AsyncFunctionAssertions<TTask,TAssertions>","entity factory controller","NotCompleteWithinAsync","property non-void-command factory collaborator",
"AsyncFunctionAssertions<TTask,TAssertions>","entity factory controller","ThrowExactlyAsync<TException>","property non-void-command factory collaborator",
"AsyncFunctionAssertions<TTask,TAssertions>","entity factory controller","ThrowAsync<TException>","property non-void-command factory collaborator",
"AsyncFunctionAssertions<TTask,TAssertions>","entity factory controller","ThrowWithinAsync<TException>","property non-void-command factory collaborator",
"AsyncFunctionAssertions<TTask,TAssertions>","entity factory controller","AssertThrows<TException>","property non-void-command factory collaborator",
"AsyncFunctionAssertions<TTask,TAssertions>","entity factory controller","InvokeWithInterceptionAsync","property non-void-command collaborator",
"AsyncFunctionAssertions<TTask,TAssertions>","entity factory controller","NotThrowAsync<TException>","property non-void-command factory collaborator",
"AsyncFunctionAssertions<TTask,TAssertions>","entity factory controller","CompletesWithinTimeoutAsync","property non-void-command collaborator",
"ExecutionTimeAssertions","empty","ExecutionTimeAssertions","constructor",
"CollectingAssertionStrategy","unclassified","DiscardFailures","property non-void-command collaborator",
"CollectingAssertionStrategy","unclassified","ThrowIfAny","controller",
"CollectingAssertionStrategy","unclassified","HandleFailure","command",
"ParentOfSubjectWithProperty1","empty","ParentOfSubjectWithProperty1","constructor",
"MemberExecutionTime<T>","empty","MemberExecutionTime","constructor",
"NonGenericAsyncFunctionAssertions","entity","NonGenericAsyncFunctionAssertions","constructor",
"NonGenericAsyncFunctionAssertions","entity","NonGenericAsyncFunctionAssertions","constructor",
"NonGenericAsyncFunctionAssertions","entity","CompleteWithinAsync","property non-void-command factory collaborator",
"NonGenericAsyncFunctionAssertions","entity","NotThrowAsync","property non-void-command factory collaborator",
"NonGenericAsyncFunctionAssertions","entity","NotThrowAfterAsync","property wrapper",
"SByteValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"SByteValueFormatter","degenerate small-class","Format","controller stateless",
"OccurrenceConstraint","pure-controller degenerate small-class","OccurrenceConstraint","constructor",
"OccurrenceConstraint","pure-controller degenerate small-class","RegisterReportables","controller stateless",
"BufferedStreamAssertions<TAssertions>","factory controller small-class","BufferedStreamAssertions","constructor",
"BufferedStreamAssertions<TAssertions>","factory controller small-class","HaveBufferSize","property factory wrapper",
"BufferedStreamAssertions<TAssertions>","factory controller small-class","NotHaveBufferSize","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","StreamAssertions","constructor",
"StreamAssertions<TSubject,TAssertions>","factory controller","BeWritable","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","NotBeWritable","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","BeSeekable","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","NotBeSeekable","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","BeReadable","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","NotBeReadable","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","HavePosition","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","NotHavePosition","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","HaveLength","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","NotHaveLength","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","BeReadOnly","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","NotBeReadOnly","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","BeWriteOnly","property factory wrapper",
"StreamAssertions<TSubject,TAssertions>","factory controller","NotBeWriteOnly","property factory wrapper",
"CustomerDto","empty","CustomerDto","constructor",
"AssemblyAssertions","entity factory controller","AssemblyAssertions","constructor",
"AssemblyAssertions","entity factory controller","NotReference","property non-void-command factory collaborator",
"AssemblyAssertions","entity factory controller","Reference","property non-void-command factory collaborator",
"AssemblyAssertions","entity factory controller","DefineType","property factory wrapper",
"AssemblyAssertions","entity factory controller","BeUnsigned","property factory wrapper",
"AssemblyAssertions","entity factory controller","BeSignedWithPublicKey","property non-void-command factory collaborator",
"DelegateAssertionsBase<TDelegate,TAssertions>","entity factory controller","DelegateAssertionsBase","constructor",
"DelegateAssertionsBase<TDelegate,TAssertions>","entity factory controller","ThrowInternal<TException>","property non-void-command factory collaborator",
"DelegateAssertionsBase<TDelegate,TAssertions>","entity factory controller","NotThrowInternal","property factory wrapper",
"DelegateAssertionsBase<TDelegate,TAssertions>","entity factory controller","NotThrowInternal<TException>","property non-void-command factory collaborator",
"ConstructorInfoAssertions","empty","ConstructorInfoAssertions","constructor",
"MemberInfoAssertions<TSubject,TAssertions>","entity","MemberInfoAssertions","constructor",
"MemberInfoAssertions<TSubject,TAssertions>","entity","BeDecoratedWith<TAttribute>","property non-void-command collaborator",
"MemberInfoAssertions<TSubject,TAssertions>","entity","NotBeDecoratedWith<TAttribute>","property non-void-command collaborator",
"MemberInfoAssertions<TSubject,TAssertions>","entity","BeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"MemberInfoAssertions<TSubject,TAssertions>","entity","NotBeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"MethodInfoAssertions","entity factory controller","MethodInfoAssertions","constructor",
"MethodInfoAssertions","entity factory controller","BeVirtual","property non-void-command factory collaborator",
"MethodInfoAssertions","entity factory controller","NotBeVirtual","property non-void-command factory collaborator",
"MethodInfoAssertions","entity factory controller","BeAsync","property non-void-command factory collaborator",
"MethodInfoAssertions","entity factory controller","NotBeAsync","property non-void-command factory collaborator",
"MethodInfoAssertions","entity factory controller","ReturnVoid","property factory wrapper",
"MethodInfoAssertions","entity factory controller","Return","property factory wrapper",
"MethodInfoAssertions","entity factory controller","Return<TReturn>","property non-void-command collaborator",
"MethodInfoAssertions","entity factory controller","NotReturnVoid","property factory wrapper",
"MethodInfoAssertions","entity factory controller","NotReturn","property factory wrapper",
"MethodInfoAssertions","entity factory controller","NotReturn<TReturn>","property non-void-command collaborator",
"MethodInfoSelectorAssertions","entity","MethodInfoSelectorAssertions","constructor",
"MethodInfoSelectorAssertions","entity","BeVirtual","property non-void-command factory collaborator",
"MethodInfoSelectorAssertions","entity","NotBeVirtual","property non-void-command factory collaborator",
"MethodInfoSelectorAssertions","entity","GetAllNonVirtualMethodsFromSelection","property non-void-command collaborator",
"MethodInfoSelectorAssertions","entity","GetAllVirtualMethodsFromSelection","property non-void-command collaborator",
"MethodInfoSelectorAssertions","entity","BeAsync","property non-void-command factory collaborator",
"MethodInfoSelectorAssertions","entity","NotBeAsync","property non-void-command factory collaborator",
"MethodInfoSelectorAssertions","entity","BeDecoratedWith<TAttribute>","property non-void-command collaborator",
"MethodInfoSelectorAssertions","entity","BeDecoratedWith<TAttribute>","property factory wrapper",
"MethodInfoSelectorAssertions","entity","NotBeDecoratedWith<TAttribute>","property non-void-command collaborator",
"MethodInfoSelectorAssertions","entity","NotBeDecoratedWith<TAttribute>","property factory wrapper",
"MethodInfoSelectorAssertions","entity","Be","property non-void-command factory collaborator",
"MethodInfoSelectorAssertions","entity","NotBe","property non-void-command factory collaborator",
"MethodInfoSelectorAssertions","entity","GetMethodsWithout<TAttribute>","property non-void-command collaborator",
"MethodInfoSelectorAssertions","entity","GetMethodsWith<TAttribute>","property non-void-command collaborator",
"SameInstanceIsNotEqualClass","degenerate small-class","Equals","collaborator incidental",
"SameInstanceIsNotEqualClass","degenerate small-class","GetHashCode","incidental",
"DecimalAssertions","pure-controller degenerate small-class","DecimalAssertions","constructor",
"DecimalAssertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"PropertyInfoSelector","unclassified","PropertyInfoSelector","constructor",
"PropertyInfoSelector","unclassified","PropertyInfoSelector","constructor",
"PropertyInfoSelector","unclassified","ThatAreDecoratedWith<TAttribute>","get set",
"PropertyInfoSelector","unclassified","ThatAreDecoratedWithOrInherit<TAttribute>","get set",
"PropertyInfoSelector","unclassified","ThatAreNotDecoratedWith<TAttribute>","get set",
"PropertyInfoSelector","unclassified","ThatAreNotDecoratedWithOrInherit<TAttribute>","get set",
"PropertyInfoSelector","unclassified","OfType<TReturn>","get set",
"PropertyInfoSelector","unclassified","NotOfType<TReturn>","get set",
"PropertyInfoSelector","unclassified","ReturnTypes","property non-void-command factory collaborator",
"PropertyInfoSelector","unclassified","ToArray","property non-void-command collaborator",
"PropertyInfoSelector","unclassified","GetEnumerator","property non-void-command collaborator",
"PropertyInfoSelector","unclassified","IEnumerable.GetEnumerator","property non-void-command collaborator",
"PropertyInfoSelector","unclassified","get","get property set",
"PropertyInfoSelector","unclassified","get","get set",
"PropertyInfoSelector","unclassified","get","get set",
"PropertyInfoSelector","unclassified","get","get set",
"PropertyInfoSelector","unclassified","get","get set",
"PropertyInfoSelector","unclassified","get","get set",
"PropertyInfoSelector","unclassified","get","get set",
"TypeSelectorAssertions","entity factory controller","TypeSelectorAssertions","constructor",
"TypeSelectorAssertions","entity factory controller","BeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","BeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","BeDecoratedWithOrInherit<TAttribute>","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","BeDecoratedWithOrInherit<TAttribute>","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","NotBeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","NotBeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","NotBeDecoratedWithOrInherit<TAttribute>","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","NotBeDecoratedWithOrInherit<TAttribute>","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","BeSealed","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","NotBeSealed","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","BeInNamespace","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","NotBeInNamespace","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","BeUnderNamespace","property non-void-command factory collaborator",
"TypeSelectorAssertions","entity factory controller","NotBeUnderNamespace","property non-void-command factory collaborator",
"AttributeData","data-provider boundary data-class small-class","AttributeData","constructor",
"AttributeData","data-provider boundary data-class small-class","get","get property wrapper",
"XmlIterator","commander","XmlIterator","constructor",
"XmlIterator","commander","Read","command",
"XmlIterator","commander","MoveToEndElement","command",
"XmlIterator","commander","GetAttributes","non-void-command factory collaborator",
"XmlReaderValidator","entity factory controller","XmlReaderValidator","constructor",
"XmlReaderValidator","entity factory controller","Validate","command collaborator",
"XmlReaderValidator","entity factory controller","Validate","property non-void-command factory collaborator",
"XmlReaderValidator","entity factory controller","ValidateAttributes","property non-void-command factory collaborator",
"XmlReaderValidator","entity factory controller","ValidateStartElement","property non-void-command factory collaborator",
"XmlReaderValidator","entity factory controller","ValidateText","property non-void-command factory collaborator",
"XmlReaderValidator","entity factory controller","ValidateAgainstNulls","property factory collaborator",
"XAttributeAssertions","factory controller","XAttributeAssertions","constructor",
"XAttributeAssertions","factory controller","Be","property factory wrapper",
"XAttributeAssertions","factory controller","NotBe","property factory wrapper",
"XAttributeAssertions","factory controller","HaveValue","property factory wrapper",
"NullableSingleAssertions","pure-controller degenerate small-class","NullableSingleAssertions","constructor",
"NullableSingleAssertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"XElementAssertions","factory controller","XElementAssertions","constructor",
"XElementAssertions","factory controller","Be","property factory wrapper",
"XElementAssertions","factory controller","NotBe","property factory wrapper",
"XElementAssertions","factory controller","BeEquivalentTo","property factory controller",
"XElementAssertions","factory controller","NotBeEquivalentTo","property factory controller",
"XElementAssertions","factory controller","HaveValue","property factory wrapper",
"XElementAssertions","factory controller","HaveAttribute","property non-void-command collaborator",
"XElementAssertions","factory controller","HaveAttribute","property factory controller",
"XElementAssertions","factory controller","HaveElement","property non-void-command collaborator",
"XElementAssertions","factory controller","HaveElement","property factory controller",
"XElementAssertions","factory controller","HaveElement","property factory controller",
"XElementAssertions","factory controller","HaveElement","property non-void-command collaborator",
"XmlElementAssertions","controller","XmlElementAssertions","constructor",
"XmlElementAssertions","controller","HaveInnerText","property factory wrapper",
"XmlElementAssertions","controller","HaveAttribute","property non-void-command collaborator",
"XmlElementAssertions","controller","HaveAttributeWithNamespace","property factory wrapper",
"XmlElementAssertions","controller","HaveElement","property non-void-command collaborator",
"XmlElementAssertions","controller","HaveElementWithNamespace","property factory controller",
"MemberSelectionContext","controller small-class","MemberSelectionContext","constructor",
"MemberSelectionContext","controller small-class","get","property controller",
"EquivalencyStep<T>","pure-controller degenerate small-class","Handle","controller stateless",
"XmlNodeAssertions","empty","XmlNodeAssertions","constructor",
"AndWhichConstraintSpecs","pure-controller degenerate small-class","When_many_objects_are_provided_accessing_which_should_throw_a_descriptive_exception","controller stateless",
"MustMatchByNameRule","pure-controller degenerate small-class","Match","controller stateless",
"MustMatchByNameRule","pure-controller degenerate small-class","ToString","incidental",
"XmlNodeFormatter","degenerate small-class","CanHandle","collaborator incidental",
"XmlNodeFormatter","degenerate small-class","Format","controller stateless",
"AttributeBasedFormatter","boundary","CanHandle","predicate non-void-command collaborator",
"AttributeBasedFormatter","boundary","Format","command collaborator",
"AttributeBasedFormatter","boundary","GetFormatter","controller stateless",
"AttributeBasedFormatter","boundary","HandleValueFormatterDetectionModeChanges","command",
"AttributeBasedFormatter","boundary","get","incidental",
"AttributeBasedFormatter","boundary","get","property non-void-command collaborator",
"ApiApproval","pure-controller degenerate small-class","ApproveApi","controller stateless",
"ClassA","degenerate small-class","DoSomething","stateless",
"ClassA","degenerate small-class","ReturnClassC","factory collaborator stateless",
"BeEquivalentToBenchmarks","commander small-class","GlobalSetup","command",
"CheckIfMemberIsBrowsableBenchmarks","boundary degenerate small-class","CheckIfMemberIsBrowsable","wrapper stateless",
"MemberMatchingSpecs","pure-controller degenerate","When_excluding_missing_members_both_fields_and_properties_should_be_ignored","controller stateless",
"MemberMatchingSpecs","pure-controller degenerate","When_a_property_shared_by_anonymous_types_doesnt_match_it_should_throw","controller stateless",
"MemberMatchingSpecs","pure-controller degenerate","Nested_properties_can_be_mapped_using_a_nested_expression","controller stateless",
"LargeObjectGraphBenchmarks","commander small-class","GlobalSetup","command",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_with_a_value_to_have_a_value_it_should_succeed","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_with_a_value_to_not_be_null_it_should_succeed","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_without_a_value_to_have_a_value_it_should_fail","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_without_a_value_to_not_be_null_it_should_fail","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_without_a_value_to_have_a_value_it_should_fail_with_descriptive_message","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_without_a_value_to_not_be_null_it_should_fail_with_descriptive_message","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_without_a_value_to_not_have_a_value_it_should_succeed","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_without_a_value_to_be_null_it_should_succeed","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_with_a_value_to_not_have_a_value_it_should_fail","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_with_a_value_to_be_null_it_should_fail","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_with_a_value_to_be_not_have_a_value_it_should_fail_with_descriptive_message","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_nullable_boolean_value_with_a_value_to_be_null_it_should_fail_with_descriptive_message","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_boolean_null_value_is_false_it_should_fail","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_boolean_null_value_is_true_it_sShould_fail","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_boolean_null_value_to_be_equal_to_different_nullable_boolean_should_fail","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_boolean_null_value_not_to_be_equal_to_same_value_should_fail","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_boolean_null_value_to_be_equal_to_null_it_should_succeed","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_boolean_null_value_not_to_be_equal_to_different_value_it_should_succeed","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_true_is_not_false_it_should_succeed","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_null_is_not_false_it_should_succeed","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_false_is_not_false_it_should_fail_with_descriptive_message","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_false_is_not_true_it_should_succeed","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_null_is_not_true_it_should_succeed","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","When_asserting_true_is_not_true_it_should_fail_with_descriptive_message","controller stateless",
"NullableBooleanAssertionSpecs","pure-controller degenerate","Should_support_chaining_constraints_with_and","controller stateless",
"SelectionRulesSpecs","pure-controller degenerate small-class","Public_methods_follow_fluent_syntax","controller stateless",
"MethodInfoSelector","unclassified","MethodInfoSelector","constructor",
"MethodInfoSelector","unclassified","MethodInfoSelector","constructor",
"MethodInfoSelector","unclassified","ThatReturn<TReturn>","get set",
"MethodInfoSelector","unclassified","ThatDoNotReturn<TReturn>","get set",
"MethodInfoSelector","unclassified","ThatAreDecoratedWith<TAttribute>","get set",
"MethodInfoSelector","unclassified","ThatAreDecoratedWithOrInherit<TAttribute>","get set",
"MethodInfoSelector","unclassified","ThatAreNotDecoratedWith<TAttribute>","get set",
"MethodInfoSelector","unclassified","ThatAreNotDecoratedWithOrInherit<TAttribute>","get set",
"MethodInfoSelector","unclassified","ThatAreAbstract","get set",
"MethodInfoSelector","unclassified","ThatAreNotAbstract","get set",
"MethodInfoSelector","unclassified","ThatAreAsync","get set",
"MethodInfoSelector","unclassified","ThatAreNotAsync","get set",
"MethodInfoSelector","unclassified","ThatAreStatic","get set",
"MethodInfoSelector","unclassified","ThatAreNotStatic","get set",
"MethodInfoSelector","unclassified","ThatAreVirtual","get set",
"MethodInfoSelector","unclassified","ThatAreNotVirtual","get set",
"MethodInfoSelector","unclassified","ReturnTypes","property non-void-command factory collaborator",
"MethodInfoSelector","unclassified","ToArray","property non-void-command collaborator",
"MethodInfoSelector","unclassified","GetEnumerator","property non-void-command collaborator",
"MethodInfoSelector","unclassified","IEnumerable.GetEnumerator","property non-void-command collaborator",
"MethodInfoSelector","unclassified","get","get set",
"MethodInfoSelector","unclassified","get","get set",
"MethodInfoSelector","unclassified","get","get set",
"ExcludeMemberByPathSelectionRule","entity boundary","ExcludeMemberByPathSelectionRule","constructor",
"ExcludeMemberByPathSelectionRule","entity boundary","AddOrRemoveMembersFrom","command collaborator",
"ExcludeMemberByPathSelectionRule","entity boundary","AppendPath","set collaborator",
"ExcludeMemberByPathSelectionRule","entity boundary","ToString","property",
"UsersOfGetClosedGenericInterfaces","unclassified","GlobalSetup","command collaborator",
"UsersOfGetClosedGenericInterfaces","unclassified","CustomValue","property factory controller",
"UsersOfGetClosedGenericInterfaces","unclassified","GenericDictionaryEquivalencyStep_CanHandle","command",
"UsersOfGetClosedGenericInterfaces","unclassified","GenericEnumerableEquivalencyStep_CanHandle","command",
"NotThrowSpecs","pure-controller degenerate","When_subject_is_null_when_an_exception_should_not_be_thrown_it_should_throw","controller stateless",
"NotThrowSpecs","pure-controller degenerate","When_a_specific_exception_should_not_be_thrown_but_it_was_it_should_throw","controller stateless",
"NotThrowSpecs","pure-controller degenerate","When_a_specific_exception_should_not_be_thrown_but_another_was_it_should_succeed","controller stateless",
"NotThrowSpecs","pure-controller degenerate","When_no_exception_should_be_thrown_but_it_was_it_should_throw","controller stateless",
"NotThrowSpecs","pure-controller degenerate","When_no_exception_should_be_thrown_and_none_was_it_should_not_throw","controller stateless",
"NotThrowSpecs","pure-controller degenerate","When_subject_is_null_when_it_should_not_throw_it_should_throw","controller stateless",
"NotThrowSpecs","pure-controller degenerate","When_subject_is_async_it_should_throw","controller stateless",
"NotThrowSpecs","pure-controller degenerate","When_wait_time_is_negative_it_should_throw","controller stateless",
"NotThrowSpecs","pure-controller degenerate","When_poll_interval_is_negative_it_should_throw","controller stateless",
"NotThrowSpecs","pure-controller degenerate","When_no_exception_should_be_thrown_after_wait_time_but_it_was_it_should_throw","controller stateless",
"NotThrowSpecs","pure-controller degenerate","When_no_exception_should_be_thrown_after_wait_time_and_none_was_it_should_not_throw","controller stateless",
"VirtualClass","data-provider boundary small-class","Equals","property collaborator",
"NonGenericChildDictionary","commander boundary small-class","Add","non-void-command collaborator",
"CompleteWithinAsyncUIFacts","degenerate","When_task_completes_fast_it_should_succeed","controller stateless",
"CompleteWithinAsyncUIFacts","degenerate","When_task_completes_late_it_should_fail","controller stateless",
"CompleteWithinAsyncUIFacts","degenerate","When_task_is_checking_synchronization_context_it_should_succeed","non-void-command collaborator",
"PredicateLambdaExpressionValueFormatterSpecs","controller degenerate","Constructor_expression_with_argument_can_be_formatted","controller stateless",
"PredicateLambdaExpressionValueFormatterSpecs","controller degenerate","Constructor_expression_can_be_simplified","controller stateless",
"PredicateLambdaExpressionValueFormatterSpecs","controller degenerate","When_first_level_properties_are_tested_for_equality_against_constants_then_output_should_be_readable","controller stateless",
"PredicateLambdaExpressionValueFormatterSpecs","controller degenerate","When_first_level_properties_are_tested_for_equality_against_constant_expressions_then_output_should_contain_values_of_constant_expressions","controller stateless",
"PredicateLambdaExpressionValueFormatterSpecs","controller degenerate","When_more_than_two_conditions_are_joined_with_and_operator_then_output_should_not_have_nested_parenthesis","controller stateless",
"PredicateLambdaExpressionValueFormatterSpecs","controller degenerate","When_condition_contains_extension_method_then_extension_method_must_be_formatted","controller stateless",
"PredicateLambdaExpressionValueFormatterSpecs","controller degenerate","When_condition_contains_linq_extension_method_then_extension_method_must_be_formatted","controller stateless",
"PredicateLambdaExpressionValueFormatterSpecs","controller degenerate","Formatting_a_lifted_binary_operator","controller stateless",
"PredicateLambdaExpressionValueFormatterSpecs","controller degenerate","Format<T>","property non-void-command collaborator",
"ObjectAssertions<TSubject,TAssertions>","factory controller","ObjectAssertions","constructor",
"ObjectAssertions<TSubject,TAssertions>","factory controller","Be","property factory wrapper",
"ObjectAssertions<TSubject,TAssertions>","factory controller","Be","property factory controller",
"ObjectAssertions<TSubject,TAssertions>","factory controller","NotBe","property factory wrapper",
"ObjectAssertions<TSubject,TAssertions>","factory controller","NotBe","property factory controller",
"ObjectAssertions<TSubject,TAssertions>","factory controller","BeEquivalentTo<TExpectation>","wrapper stateless",
"ObjectAssertions<TSubject,TAssertions>","factory controller","BeEquivalentTo<TExpectation>","property set factory collaborator",
"ObjectAssertions<TSubject,TAssertions>","factory controller","NotBeEquivalentTo<TExpectation>","wrapper stateless",
"ObjectAssertions<TSubject,TAssertions>","factory controller","NotBeEquivalentTo<TExpectation>","property factory wrapper",
"ObjectAssertions<TSubject,TAssertions>","factory controller","BeOneOf","wrapper stateless",
"ObjectAssertions<TSubject,TAssertions>","factory controller","BeOneOf","property factory controller",
"ObjectAssertions<TSubject,TAssertions>","factory controller","BeOneOf","property factory controller",
"IgnoringFailuresAssertionStrategy","degenerate small-class","HandleFailure","empty",
"IgnoringFailuresAssertionStrategy","degenerate small-class","ThrowIfAny","empty",
"For","degenerate","When_property_in_collection_is_excluded_it_should_not_throw","controller stateless",
"For","degenerate","When_property_in_collection_is_excluded_it_should_not_throw_if_root_is_a_collection","wrapper stateless",
"For","degenerate","When_collection_in_collection_is_excluded_it_should_not_throw","controller stateless",
"For","degenerate","When_property_in_collection_in_collection_is_excluded_it_should_not_throw","controller stateless",
"For","degenerate","When_property_in_object_in_collection_is_excluded_it_should_not_throw","controller stateless",
"For","degenerate","When_property_in_object_in_collection_in_object_in_collection_is_excluded_it_should_not_throw","controller stateless",
"For","degenerate","A_nested_exclusion_can_be_followed_by_a_root_level_exclusion","controller stateless",
"For","degenerate","A_nested_exclusion_can_be_preceded_by_a_root_level_exclusion","controller stateless",
"For","degenerate","A_nested_exclusion_can_be_followed_by_a_nested_exclusion","controller stateless",
"Int64Assertions","pure-controller degenerate small-class","Int64Assertions","constructor",
"Int64Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"LogbookCode","empty","LogbookCode","constructor",
"ByteAssertions","pure-controller degenerate small-class","ByteAssertions","constructor",
"ByteAssertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"DateTimePropertiesSpecs","pure-controller degenerate","When_two_properties_are_datetime_and_both_are_nullable_and_both_are_null_it_should_succeed","controller stateless",
"DateTimePropertiesSpecs","pure-controller degenerate","When_two_properties_are_datetime_and_both_are_nullable_and_are_equal_it_should_succeed","controller stateless",
"DateTimePropertiesSpecs","pure-controller degenerate","When_two_properties_are_datetime_and_both_are_nullable_and_expectation_is_null_it_should_throw_and_state_the_difference","controller stateless",
"DateTimePropertiesSpecs","pure-controller degenerate","When_two_properties_are_datetime_and_both_are_nullable_and_subject_is_null_it_should_throw_and_state_the_difference","controller stateless",
"DateTimePropertiesSpecs","pure-controller degenerate","When_two_properties_are_datetime_and_expectation_is_nullable_and_are_equal_it_should_succeed","controller stateless",
"DateTimePropertiesSpecs","pure-controller degenerate","When_two_properties_are_datetime_and_expectation_is_nullable_and_expectation_is_null_it_should_throw_and_state_the_difference","controller stateless",
"DateTimePropertiesSpecs","pure-controller degenerate","When_two_properties_are_datetime_and_subject_is_nullable_and_are_equal_it_should_succeed","controller stateless",
"DateTimePropertiesSpecs","pure-controller degenerate","When_two_properties_are_datetime_and_subject_is_nullable_and_subject_is_null_it_should_throw_and_state_the_difference","controller stateless",
"SomeBaseKeyClass","data-provider","SomeBaseKeyClass","constructor",
"SomeBaseKeyClass","data-provider","GetHashCode","get",
"SomeBaseKeyClass","data-provider","Equals","predicate",
"SomeBaseKeyClass","data-provider","Equals","predicate non-void-command collaborator",
"SomeBaseKeyClass","data-provider","ToString","incidental",
"OrderingRuleCollection","entity boundary","OrderingRuleCollection","constructor",
"OrderingRuleCollection","entity boundary","OrderingRuleCollection","constructor",
"OrderingRuleCollection","entity boundary","GetEnumerator","property non-void-command collaborator",
"OrderingRuleCollection","entity boundary","IEnumerable.GetEnumerator","property non-void-command collaborator",
"OrderingRuleCollection","entity boundary","Add","command collaborator",
"OrderingRuleCollection","entity boundary","Clear","command",
"OrderingRuleCollection","entity boundary","IsOrderingStrictFor","predicate non-void-command collaborator",
"SomeDerivedKeyClass","empty","SomeDerivedKeyClass","constructor",
"ExceptionAssertionSpecs","pure-controller degenerate","When_method_throws_an_empty_AggregateException_it_should_fail","controller stateless",
"ExceptionAssertionSpecs","pure-controller degenerate","When_the_expected_exception_is_wrapped_it_should_succeed<T>","controller stateless",
"ExceptionAssertionSpecs","pure-controller degenerate","When_the_expected_exception_is_not_wrapped_it_should_fail<T>","controller stateless",
"ExceptionAssertionSpecs","pure-controller degenerate","ThrowExactly_when_subject_throws_subclass_of_expected_exception_it_should_throw","controller stateless",
"ExceptionAssertionSpecs","pure-controller degenerate","ThrowExactly_when_subject_throws_aggregate_exception_instead_of_expected_exception_it_should_throw","controller stateless",
"ExceptionAssertionSpecs","pure-controller degenerate","ThrowExactly_when_subject_throws_expected_exception_it_should_not_do_anything","controller stateless",
"TypeAssertions","controller","TypeAssertions","constructor",
"TypeAssertions","controller","Be<TExpected>","property non-void-command collaborator",
"TypeAssertions","controller","Be","property factory wrapper",
"TypeAssertions","controller","BeAssignableTo<T>","property non-void-command collaborator",
"TypeAssertions","controller","BeAssignableTo","property non-void-command factory collaborator",
"TypeAssertions","controller","NotBeAssignableTo<T>","property non-void-command collaborator",
"TypeAssertions","controller","NotBeAssignableTo","property non-void-command factory collaborator",
"TypeAssertions","controller","NotBe<TUnexpected>","property non-void-command collaborator",
"TypeAssertions","controller","NotBe","property factory wrapper",
"TypeAssertions","controller","BeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"TypeAssertions","controller","BeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"TypeAssertions","controller","BeDecoratedWithOrInherit<TAttribute>","property non-void-command factory collaborator",
"TypeAssertions","controller","BeDecoratedWithOrInherit<TAttribute>","property non-void-command factory collaborator",
"TypeAssertions","controller","NotBeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"TypeAssertions","controller","NotBeDecoratedWith<TAttribute>","property non-void-command factory collaborator",
"TypeAssertions","controller","NotBeDecoratedWithOrInherit<TAttribute>","property non-void-command factory collaborator",
"TypeAssertions","controller","NotBeDecoratedWithOrInherit<TAttribute>","property non-void-command factory collaborator",
"TypeAssertions","controller","Implement","property non-void-command factory collaborator",
"TypeAssertions","controller","AssertSubjectImplements","predicate controller",
"TypeAssertions","controller","Implement<TInterface>","property non-void-command collaborator",
"TypeAssertions","controller","NotImplement","property factory controller",
"TypeAssertions","controller","NotImplement<TInterface>","property non-void-command collaborator",
"TypeAssertions","controller","BeDerivedFrom","property non-void-command factory collaborator",
"TypeAssertions","controller","BeDerivedFrom<TBaseClass>","property non-void-command collaborator",
"TypeAssertions","controller","NotBeDerivedFrom","property non-void-command factory collaborator",
"TypeAssertions","controller","NotBeDerivedFrom<TBaseClass>","property non-void-command collaborator",
"TypeAssertions","controller","BeSealed","property non-void-command factory collaborator",
"TypeAssertions","controller","NotBeSealed","property non-void-command factory collaborator",
"TypeAssertions","controller","BeAbstract","property non-void-command factory collaborator",
"TypeAssertions","controller","NotBeAbstract","property non-void-command factory collaborator",
"TypeAssertions","controller","BeStatic","property non-void-command factory collaborator",
"TypeAssertions","controller","NotBeStatic","property non-void-command factory collaborator",
"TypeAssertions","controller","HaveProperty","property non-void-command factory collaborator",
"TypeAssertions","controller","HaveProperty<TProperty>","property non-void-command collaborator",
"TypeAssertions","controller","NotHaveProperty","property non-void-command factory collaborator",
"TypeAssertions","controller","HaveExplicitProperty","property non-void-command factory collaborator",
"TypeAssertions","controller","HaveExplicitProperty<TInterface>","property non-void-command collaborator",
"TypeAssertions","controller","NotHaveExplicitProperty","property non-void-command factory collaborator",
"TypeAssertions","controller","NotHaveExplicitProperty<TInterface>","property non-void-command collaborator",
"TypeAssertions","controller","HaveExplicitMethod","property non-void-command factory collaborator",
"TypeAssertions","controller","HaveExplicitMethod<TInterface>","property non-void-command collaborator",
"TypeAssertions","controller","NotHaveExplicitMethod","property non-void-command factory collaborator",
"TypeAssertions","controller","NotHaveExplicitMethod<TInterface>","property non-void-command collaborator",
"TypeAssertions","controller","HaveIndexer","property non-void-command factory collaborator",
"TypeAssertions","controller","NotHaveIndexer","property non-void-command factory collaborator",
"TypeAssertions","controller","HaveMethod","property non-void-command factory collaborator",
"TypeAssertions","controller","NotHaveMethod","property non-void-command factory collaborator",
"TypeAssertions","controller","HaveConstructor","property non-void-command factory collaborator",
"TypeAssertions","controller","HaveDefaultConstructor","property non-void-command collaborator",
"TypeAssertions","controller","NotHaveConstructor","property non-void-command factory collaborator",
"TypeAssertions","controller","NotHaveDefaultConstructor","property non-void-command collaborator",
"TypeAssertions","controller","HaveAccessModifier","property non-void-command factory collaborator",
"TypeAssertions","controller","NotHaveAccessModifier","property non-void-command factory collaborator",
"TypeAssertions","controller","HaveImplicitConversionOperator<TSource,TTarget>","property non-void-command collaborator",
"TypeAssertions","controller","HaveImplicitConversionOperator","property non-void-command factory collaborator",
"TypeAssertions","controller","NotHaveImplicitConversionOperator<TSource,TTarget>","property non-void-command collaborator",
"TypeAssertions","controller","NotHaveImplicitConversionOperator","property non-void-command factory collaborator",
"TypeAssertions","controller","HaveExplicitConversionOperator<TSource,TTarget>","property non-void-command collaborator",
"TypeAssertions","controller","HaveExplicitConversionOperator","property non-void-command factory collaborator",
"TypeAssertions","controller","NotHaveExplicitConversionOperator<TSource,TTarget>","property non-void-command collaborator",
"TypeAssertions","controller","NotHaveExplicitConversionOperator","property non-void-command factory collaborator",
"TypeAssertions","controller","AssertThatSubjectIsClass","wrapper",
"EnumSpecs","pure-controller degenerate","When_asserting_the_same_enum_member_is_equivalent_it_should_succeed","controller stateless",
"EnumSpecs","pure-controller degenerate","When_the_actual_enum_value_is_null_it_should_report_that_properly","controller stateless",
"EnumSpecs","pure-controller degenerate","When_the_actual_enum_name_is_null_it_should_report_that_properly","controller stateless",
"EnumSpecs","pure-controller degenerate","When_asserting_different_enum_members_are_equivalent_it_should_fail","controller stateless",
"EnumSpecs","pure-controller degenerate","Comparing_collections_of_enums_by_value_includes_custom_message","controller stateless",
"EnumSpecs","pure-controller degenerate","Comparing_collections_of_enums_by_name_includes_custom_message","controller stateless",
"EnumSpecs","pure-controller degenerate","Comparing_collections_of_numerics_with_collections_of_enums_includes_custom_message","controller stateless",
"EnumSpecs","pure-controller degenerate","When_asserting_members_from_different_enum_types_are_equivalent_it_should_compare_by_value_by_default","controller stateless",
"EnumSpecs","pure-controller degenerate","When_asserting_members_from_different_enum_types_are_equivalent_by_value_it_should_succeed","controller stateless",
"EnumSpecs","pure-controller degenerate","When_asserting_members_from_different_enum_types_are_equivalent_by_string_value_it_should_succeed","controller stateless",
"EnumSpecs","pure-controller degenerate","When_asserting_members_from_different_enum_types_are_equivalent_by_value_but_comparing_by_name_it_should_throw","controller stateless",
"EnumSpecs","pure-controller degenerate","When_asserting_members_from_different_char_enum_types_are_equivalent_by_value_it_should_succeed","controller stateless",
"EnumSpecs","pure-controller degenerate","When_asserting_enums_typed_as_object_are_equivalent_it_should_succeed","controller stateless",
"EnumSpecs","pure-controller degenerate","When_a_numeric_member_is_compared_with_an_enum_it_should_throw","controller stateless",
"EnumSpecs","pure-controller degenerate","When_a_string_member_is_compared_with_an_enum_it_should_throw","controller stateless",
"EnumSpecs","pure-controller degenerate","When_null_enum_members_are_compared_by_name_it_should_succeed","controller stateless",
"EnumSpecs","pure-controller degenerate","When_null_enum_members_are_compared_by_value_it_should_succeed","controller stateless",
"EnumSpecs","pure-controller degenerate","When_zero_and_null_enum_are_compared_by_value_it_should_throw","controller stateless",
"EnumSpecs","pure-controller degenerate","When_subject_is_null_and_enum_has_some_value_it_should_throw","controller stateless",
"EnumSpecs","pure-controller degenerate","When_expectation_is_null_and_subject_enum_has_some_value_it_should_throw_with_a_useful_message","controller stateless",
"EnumSpecs","pure-controller degenerate","When_both_enums_are_equal_and_greater_than_max_long_it_should_not_throw","controller stateless",
"EnumSpecs","pure-controller degenerate","When_both_enums_are_equal_and_of_different_underlying_types_it_should_not_throw","controller stateless",
"EnumSpecs","pure-controller degenerate","When_both_enums_are_large_and_not_equal_it_should_throw","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_a_selection_rule_is_added_it_should_be_evaluated_after_all_existing_rules","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_a_selection_rule_is_added_it_should_appear_in_the_exception_message","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_a_matching_rule_is_added_it_should_precede_all_existing_rules","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_a_matching_rule_is_added_it_should_appear_in_the_exception_message","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_an_ordering_rule_is_added_it_should_be_evaluated_after_all_existing_rules","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_an_ordering_rule_is_added_it_should_appear_in_the_exception_message","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_property_of_other_is_incompatible_with_generic_type_the_message_should_include_generic_type","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_exclude_all_properties_of_the_parent_type","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_property_of_subject_is_incompatible_with_generic_type_the_message_should_include_generic_type","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_equally_named_properties_are_both_incompatible_with_generic_type_the_message_should_include_generic_type","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_property_of_other_is_null_the_failure_message_should_not_complain_about_its_type","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_property_of_subject_is_null_the_failure_message_should_not_complain_about_its_type","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_equally_named_properties_are_both_null_it_should_succeed","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_equally_named_properties_are_type_incompatible_and_assertion_rule_exists_it_should_not_throw","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_an_assertion_is_overridden_for_a_predicate_it_should_use_the_provided_action","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_an_assertion_is_overridden_for_all_types_it_should_use_the_provided_action_for_all_properties","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_subject_or_expectation_is_null_it_should_not_match_a_non_nullable_type","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_subject_or_expectation_is_null_it_should_match_a_nullable_type","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_types_are_nullable_it_should_match_a_nullable_type","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_overriding_with_custom_assertion_it_should_be_chainable","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_a_nullable_property_is_overridden_with_a_custom_assertion_it_should_use_it","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_an_assertion_rule_is_added_it_should_precede_all_existing_rules","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_an_assertion_rule_is_added_it_appear_in_the_exception_message","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_multiple_steps_are_added_they_should_be_evaluated_first_to_last","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_multiple_assertion_rules_are_added_with_the_fluent_api_they_should_be_executed_from_right_to_left","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_using_a_nested_equivalency_api_in_a_custom_assertion_rule_it_should_honor_the_rule","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_a_predicate_matches_after_auto_conversion_it_should_execute_the_assertion","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_an_equivalency_step_handles_the_comparison_later_equivalency_steps_should_not_be_ran","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_a_user_equivalency_step_is_registered_it_should_run_before_the_built_in_steps","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_an_equivalency_does_not_handle_the_comparison_later_equivalency_steps_should_still_be_ran","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","When_multiple_equivalency_steps_are_added_they_should_be_executed_in_registration_order","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_null_against_null_with_custom_comparer_for_nullable_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_null_against_not_null_with_custom_comparer_for_nullable_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_not_null_against_null_with_custom_comparer_for_nullable_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_not_null_against_not_null_with_custom_comparer_for_nullable_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_null_against_null_with_custom_nullable_comparer_for_nullable_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_null_against_not_null_with_custom_nullable_comparer_for_nullable_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_not_null_against_null_with_custom_nullable_comparer_for_nullable_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_not_null_against_not_null_with_custom_nullable_comparer_for_nullable_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_null_against_null_with_custom_comparer_for_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_null_against_not_null_with_custom_comparer_for_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_not_null_against_null_with_custom_comparer_for_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Can_compare_not_null_against_not_null_with_custom_comparer_for_property","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Methods_marked_as_custom_assertion_are_ignored_during_caller_identification","controller stateless",
"ExtensibilitySpecs","pure-controller degenerate","Methods_in_assemblies_marked_as_custom_assertion_are_ignored_during_caller_identification","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","When_two_objects_have_the_same_properties_with_convertable_values_it_should_succeed","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","When_a_string_is_declared_equivalent_to_an_int_representing_the_numerals_it_should_pass","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","When_an_int_is_compared_equivalent_to_a_string_representing_the_number_it_should_pass","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","Numbers_can_be_converted_to_enums","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","Enums_are_not_converted_to_enums_of_different_type","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","Strings_are_not_converted_to_enums","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","Numbers_that_are_out_of_range_cannot_be_converted_to_enums","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","When_injecting_a_null_predicate_into_WithAutoConversionFor_it_should_throw","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","When_only_a_single_property_is_and_can_be_converted_but_the_other_one_doesnt_match_it_should_throw","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","When_only_a_single_property_is_converted_and_the_other_matches_it_should_succeed","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","When_injecting_a_null_predicate_into_WithoutAutoConversionFor_it_should_throw","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","When_a_specific_mismatching_property_is_excluded_from_conversion_it_should_throw","controller stateless",
"MemberConversionSpecs","pure-controller degenerate","When_declaring_equivalent_a_convertable_object_that_is_equivalent_once_converted_it_should_pass","controller stateless",
"ParentOfExpectationWithProperty2","empty","ParentOfExpectationWithProperty2","constructor",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_TimeSpan_value_with_a_value_to_have_a_value","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_TimeSpan_value_with_a_value_to_not_be_null","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_fail_when_asserting_nullable_TimeSpan_value_without_a_value_to_not_be_null","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_nullable_TimeSpan_value_without_a_value_to_have_a_value","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_nullable_TimeSpan_value_without_a_value_to_not_be_null","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_TimeSpan_value_without_a_value_to_not_have_a_value","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_succeed_when_asserting_nullable_TimeSpan_value_without_a_value_to_be_null","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_fail_when_asserting_nullable_TimeSpan_value_with_a_value_to_not_have_a_value","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_fail_when_asserting_nullable_TimeSpan_value_with_a_value_to_be_null","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_nullable_TimeSpan_value_with_a_value_to_not_have_a_value","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_fail_with_descriptive_message_when_asserting_nullable_TimeSpan_value_with_a_value_to_be_null","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_a_nullable_TimeSpan_is_equal_to_a_different_nullable_TimeSpan_it_should_should_throw_appropriately","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_a_nullable_TimeSpan_is_equal_to_another_a_nullable_TimeSpan_but_it_is_null_it_should_fail_with_a_descriptive_message","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_a_nullable_TimeSpan_is_equal_to_another_a_nullable_TimeSpan_and_both_are_null_it_should_succeed","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","When_asserting_a_nullable_TimeSpan_is_equal_to_the_same_nullable_TimeSpan_it_should_succeed","controller stateless",
"NullableSimpleTimeSpanAssertionSpecs","pure-controller degenerate","Should_support_chaining_constraints_with_and","controller stateless",
"ParentOfSubjectWithExplicitlyImplementedProperty","empty","ParentOfSubjectWithExplicitlyImplementedProperty","constructor",
"OneTimeEnumerable<T>","entity boundary small-class","GetEnumerator","property non-void-command collaborator",
"XUnit2TestFramework","small-class","Throw","command collaborator",
"XUnit2TestFramework","small-class","get","predicate set",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","SimpleTimeSpanAssertions","constructor",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","BePositive","property factory wrapper",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","BeNegative","property factory wrapper",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","Be","property factory wrapper",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","NotBe","property factory wrapper",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","BeLessThan","property factory wrapper",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","BeLessThanOrEqualTo","property factory wrapper",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","BeGreaterThan","property factory wrapper",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","BeGreaterThanOrEqualTo","property factory wrapper",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","BeCloseTo","property factory wrapper",
"SimpleTimeSpanAssertions<TAssertions>","factory controller","NotBeCloseTo","property factory wrapper",
"NestedPropertiesSpecs","pure-controller degenerate","When_all_the_properties_of_the_nested_objects_are_equal_it_should_succeed","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_the_expectation_contains_a_nested_null_it_should_properly_report_the_difference","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_not_all_the_properties_of_the_nested_objects_are_equal_but_nested_objects_are_excluded_it_should_succeed","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_nested_objects_should_be_excluded_it_should_do_a_simple_equality_check_instead","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_not_all_the_properties_of_the_nested_objects_are_equal_it_should_throw","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_the_actual_nested_object_is_null_it_should_throw","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_deeply_nested_strings_dont_match_it_should_properly_report_the_mismatches","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_the_nested_object_property_is_null_it_should_throw","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_not_all_the_properties_of_the_nested_object_exist_on_the_expected_object_it_should_throw","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_all_the_shared_properties_of_the_nested_objects_are_equal_it_should_succeed","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_deeply_nested_properties_do_not_have_all_equal_values_it_should_throw","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_two_objects_have_the_same_nested_objects_it_should_not_throw","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","When_a_property_of_a_nested_object_doesnt_match_it_should_clearly_indicate_the_path","controller stateless",
"NestedPropertiesSpecs","pure-controller degenerate","Should_support_nested_collections_containing_empty_objects","controller stateless",
"ObjectReferenceSpecs","pure-controller degenerate small-class","Equals_should_be_symmetrical","controller stateless",
"ClassWithPublicMethods","degenerate small-class","PublicDoNothing","empty",
"ClassWithPublicMethods","degenerate small-class","DoNothingWithParameter","empty",
"ClassWithCctor","empty","ClassWithCctor","constructor",
"Customer","commander data-class small-class","SetProtected","set",
"Customer","commander data-class small-class","Customer","constructor",
"Customer","commander data-class small-class","Customer","constructor",
"Customer","commander data-class small-class","SetProtected","set",
"Customer","commander data-class small-class","Customer","constructor",
"Customer","commander data-class small-class","Customer","constructor",
"ClassWithAllAccessModifiersForMembers","empty","ClassWithAllAccessModifiersForMembers","constructor",
"ClassWithValueSemanticsOnSingleProperty","unclassified","Equals","predicate",
"ClassWithValueSemanticsOnSingleProperty","unclassified","Equals","predicate non-void-command collaborator",
"ClassWithValueSemanticsOnSingleProperty","unclassified","GetHashCode","property non-void-command",
"CustomConvertible","data-provider boundary lazy-class degenerate","CustomConvertible","constructor",
"CustomConvertible","data-provider boundary lazy-class degenerate","GetTypeCode","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToBoolean","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToChar","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToSByte","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToByte","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToInt16","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToUInt16","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToInt32","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToUInt32","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToInt64","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToUInt64","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToSingle","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToDouble","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToDecimal","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToDateTime","collaborator stateless",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToString","get collaborator",
"CustomConvertible","data-provider boundary lazy-class degenerate","ToType","collaborator stateless",
"CollectionMemberSelectionRuleDecorator","small-class","CollectionMemberSelectionRuleDecorator","constructor",
"CollectionMemberSelectionRuleDecorator","small-class","SelectMembers","property non-void-command collaborator",
"CollectionMemberSelectionRuleDecorator","small-class","ToString","property non-void-command",
"ClassToExploreUnwrappedTaskTypes","boundary degenerate","DoWithInt","incidental",
"ClassToExploreUnwrappedTaskTypes","boundary degenerate","DoWithTask","collaborator incidental",
"ClassToExploreUnwrappedTaskTypes","boundary degenerate","DoWithValueTask","collaborator incidental",
"ClassToExploreUnwrappedTaskTypes","boundary degenerate","DoWithIntTask","wrapper stateless",
"ClassToExploreUnwrappedTaskTypes","boundary degenerate","DoWithBoolValueTask","factory collaborator stateless",
"EqualityStrategyProvider","boundary","EqualityStrategyProvider","constructor",
"EqualityStrategyProvider","boundary","EqualityStrategyProvider","constructor",
"EqualityStrategyProvider","boundary","GetEqualityStrategy","property non-void-command collaborator",
"EqualityStrategyProvider","boundary","AddReferenceType","predicate non-void-command collaborator",
"EqualityStrategyProvider","boundary","AddValueType","predicate non-void-command collaborator",
"EqualityStrategyProvider","boundary","ToString","property controller",
"EqualityStrategyProvider","boundary","set","set",
"UInt16ValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"UInt16ValueFormatter","degenerate small-class","Format","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_when_not_expecting_an_exception_it_should_throw","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_method_throws_an_empty_AggregateException_it_should_fail","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_the_expected_exception_is_wrapped_it_should_succeed<T>","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_the_expected_exception_is_not_wrapped_it_should_fail<T>","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","Function_Assertions_should_expose_subject","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_when_an_exception_should_be_thrown_it_should_throw","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_throws_the_expected_exception_it_should_succeed","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_throws_subclass_of_the_expected_exception_it_should_succeed","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_not_throw_expected_exception_it_should_fail","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_not_throw_expected_exception_but_throws_aggregate_it_should_fail_with_inner_exception","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_throw_expected_exception_but_in_aggregate_it_should_succeed","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_not_throw_expected_exception_but_throws_aggregate_in_aggregate_it_should_fail_with_inner_exception_one_level_deep","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_throw_expected_exception_but_in_aggregate_in_aggregate_it_should_succeed","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_not_throw_any_exception_it_should_fail","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_when_an_exact_exception_should_be_thrown_it_should_throw","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_throws_the_expected_exact_exception_it_should_succeed","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_throws_aggregate_exception_with_inner_exception_of_the_expected_exact_exception_it_should_fail","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_throws_subclass_of_the_expected_exact_exception_it_should_fail","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_not_throw_expected_exact_exception_it_should_fail","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_not_throw_any_exception_when_expected_exact_it_should_fail","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_when_an_exception_should_not_be_thrown_it_should_throw","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_when_a_generic_exception_should_not_be_thrown_it_should_throw","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_not_throw_exception_and_that_was_expected_it_should_succeed_then_continue_assertion","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_throw_exception_and_that_was_not_expected_it_should_fail","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_throw_aggregate_exception_and_that_was_not_expected_it_should_fail_with_inner_exception_in_message","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_throw_aggregate_in_aggregate_exception_and_that_was_not_expected_it_should_fail_with_most_inner_exception_in_message","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_an_assertion_fails_on_NotThrow_succeeding_message_should_be_included","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_subject_is_null_it_should_throw","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_wait_time_is_negative_it_should_throw","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_poll_interval_is_negative_it_should_throw","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_no_exception_should_be_thrown_after_wait_time_but_it_was_it_should_throw","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_no_exception_should_be_thrown_after_wait_time_and_none_was_it_should_not_throw","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_no_exception_should_be_thrown_after_wait_time_the_func_result_should_be_returned","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_an_assertion_fails_on_NotThrowAfter_succeeding_message_should_be_included","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_not_throw_at_all_when_some_particular_exception_was_not_expected_it_should_succeed_but_then_cannot_continue_assertion","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_does_throw_exception_and_that_exception_was_not_expected_it_should_fail","controller stateless",
"FunctionExceptionAssertionSpecs","pure-controller degenerate","When_function_throw_one_exception_but_other_was_not_expected_it_should_succeed","controller stateless",
"EnumerableEquivalencyValidator","boundary","EnumerableEquivalencyValidator","constructor",
"EnumerableEquivalencyValidator","boundary","Execute<T>","void-accessor command collaborator",
"EnumerableEquivalencyValidator","boundary","AssertElementGraphEquivalency<T>","void-accessor set collaborator",
"EnumerableEquivalencyValidator","boundary","AssertElementGraphEquivalencyWithStrictOrdering<T>","void-accessor command collaborator",
"EnumerableEquivalencyValidator","boundary","AssertElementGraphEquivalencyWithLooseOrdering<T>","void-accessor command collaborator",
"EnumerableEquivalencyValidator","boundary","LooselyMatchAgainst<T>","predicate non-void-command",
"EnumerableEquivalencyValidator","boundary","TryToMatch<T>","property non-void-command",
"EnumerableEquivalencyValidator","boundary","StrictlyMatchAgainst<T>","predicate non-void-command",
"ExplicitReadOnlyVehicle","empty","ExplicitReadOnlyVehicle","constructor",
"NonEquivalencySpecs","pure-controller degenerate","When_asserting_inequivalence_of_equal_ints_as_object_it_should_fail","controller stateless",
"NonEquivalencySpecs","pure-controller degenerate","When_asserting_inequivalence_of_unequal_ints_as_object_it_should_succeed","controller stateless",
"NonEquivalencySpecs","pure-controller degenerate","When_asserting_inequivalence_of_equal_strings_as_object_it_should_fail","controller stateless",
"NonEquivalencySpecs","pure-controller degenerate","When_asserting_inequivalence_of_unequal_strings_as_object_it_should_succeed","controller stateless",
"NonEquivalencySpecs","pure-controller degenerate","When_asserting_inequivalence_of_equal_classes_it_should_fail","controller stateless",
"NonEquivalencySpecs","pure-controller degenerate","When_asserting_inequivalence_of_unequal_classes_it_should_succeed","controller stateless",
"ExtensionAssemblyAttributeSpecs","pure-controller degenerate small-class","Calls_assembly_initialization_code_only_once","controller stateless",
"AssertionExtensionsSpecs","pure-controller degenerate small-class","Assertions_classes_override_equals","controller stateless",
"StringContainsStrategy","pure-controller small-class","StringContainsStrategy","constructor",
"StringContainsStrategy","pure-controller small-class","ValidateAgainstMismatch","controller",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_two_collections_contain_the_same_items_but_in_different_order_it_should_not_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_the_second_collection_contains_just_1_item_not_included_in_the_first_it_should_not_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_a_collection_does_not_contain_an_ordered_item_it_should_not_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_checking_for_an_empty_list_it_should_not_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_a_collection_contains_less_items_it_should_not_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_a_collection_does_not_contain_a_range_twice_it_should_not_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_two_collections_contain_the_same_items_not_in_the_same_explicit_order_it_should_not_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_asserting_collection_does_not_contain_some_values_in_order_but_collection_is_null_it_should_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_collection_is_null_then_not_contain_in_order_should_fail","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_collection_and_contains_contain_the_same_items_in_the_same_order_with_null_value_it_should_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_the_second_collection_contains_just_1_item_included_in_the_first_it_should_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_the_first_collection_contains_a_duplicate_item_without_affecting_the_order_it_should_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_the_first_collection_contains_a_duplicate_item_not_at_start_without_affecting_the_order_it_should_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_two_collections_contain_the_same_duplicate_items_in_the_same_order_it_should_throw","controller stateless",
"NotContainInConsecutiveOrder","pure-controller degenerate","When_passing_in_null_while_checking_for_absence_of_ordered_containment_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_two_collections_contain_the_same_items_but_in_different_order_it_should_not_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_a_collection_does_not_contain_an_ordered_item_it_should_not_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_a_collection_contains_less_items_it_should_not_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_a_collection_does_not_contain_a_range_twice_it_should_not_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_asserting_collection_does_not_contain_some_values_in_order_but_collection_is_null_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_two_collections_contain_the_same_items_in_the_same_order_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_collection_is_null_then_not_contain_in_order_should_fail","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_collection_contains_contain_the_same_items_in_the_same_order_with_null_value_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_the_first_collection_contains_a_duplicate_item_without_affecting_the_order_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_two_collections_contain_the_same_duplicate_items_in_the_same_order_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_passing_in_null_while_checking_for_absence_of_ordered_containment_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_two_collections_contain_the_same_items_but_in_different_order_it_should_not_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_a_collection_does_not_contain_an_ordered_item_it_should_not_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_a_collection_contains_less_items_it_should_not_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_a_collection_does_not_contain_a_range_twice_it_should_not_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_asserting_collection_does_not_contain_some_values_in_order_but_collection_is_null_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_two_collections_contain_the_same_items_in_the_same_order_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_collection_contains_contain_the_same_items_in_the_same_order_with_null_value_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_the_first_collection_contains_a_duplicate_item_without_affecting_the_order_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_two_collections_contain_the_same_duplicate_items_in_the_same_order_it_should_throw","controller stateless",
"NotContainInOrder","pure-controller degenerate","When_passing_in_null_while_checking_for_absence_of_ordered_containment_it_should_throw","controller stateless",
"TrackingTestEnumerable","boundary data-class small-class","TrackingTestEnumerable","constructor",
"TrackingTestEnumerable","boundary data-class small-class","GetEnumerator","get non-void-command collaborator",
"TrackingEnumerator","commander","TrackingEnumerator","constructor",
"TrackingEnumerator","commander","IncreaseEnumerationCount","set",
"TrackingEnumerator","commander","MoveNext","predicate set",
"TrackingEnumerator","commander","Reset","set",
"TrackingEnumerator","commander","Dispose","empty",
"TimeSpanPredicate","boundary degenerate small-class","TimeSpanPredicate","constructor",
"TimeSpanPredicate","boundary degenerate small-class","IsMatchedBy","wrapper stateless",
"GenericCollectionAssertionOfStringSpecs","degenerate","When_asserting_collection_contains_some_values_in_order_but_collection_is_null_it_should_throw","controller stateless",
"GenericCollectionAssertionOfStringSpecs","degenerate","When_collection_contains_null_value_it_should_not_throw","controller stateless",
"GenericCollectionAssertionOfStringSpecs","degenerate","When_passing_in_null_while_checking_for_ordered_containment_it_should_throw_with_a_clear_explanation","collaborator incidental",
"GenericCollectionAssertionOfStringSpecs","degenerate","When_using_StringCollectionAssertions_the_AndConstraint_should_have_the_correct_type","controller stateless",
"GenericCollectionAssertionOfStringSpecs","degenerate","When_accidentally_using_equals_it_should_throw_a_helpful_error","controller stateless",
"ConfigurationSpecs","pure-controller degenerate","Value_formatter_detection_mode_is_disabled_with_empty_store","controller stateless",
"ConfigurationSpecs","pure-controller degenerate","Value_formatter_detection_mode_is_specific_with_given_value_formatters_assembly","controller stateless",
"ConfigurationSpecs","pure-controller degenerate","Value_formatter_detection_mode_can_be_specified_in_configuration_store","controller stateless",
"ConfigurationSpecs","pure-controller degenerate","Value_formatter_detection_mode_throws_when_configured_incorrectly","controller stateless",
"ConfigurationSpecs","pure-controller degenerate","When_concurrently_accessing_current_Configuration_no_exception_should_be_thrown","controller stateless",
"CulturedXunitTestCase","entity commander boundary","CulturedXunitTestCase","constructor",
"CulturedXunitTestCase","entity commander boundary","CulturedXunitTestCase","constructor",
"CulturedXunitTestCase","entity commander boundary","Initialize","set",
"CulturedXunitTestCase","entity commander boundary","Deserialize","command collaborator",
"CulturedXunitTestCase","entity commander boundary","Serialize","command collaborator",
"CulturedXunitTestCase","entity commander boundary","RunAsync","property non-void-command collaborator",
"DateTimeOffsetValueFormatter","degenerate small-class","CanHandle","collaborator incidental",
"DateTimeOffsetValueFormatter","degenerate small-class","Format","controller stateless",
"DefaultAssertionStrategy","degenerate small-class","HandleFailure","wrapper stateless",
"DefaultAssertionStrategy","degenerate small-class","ThrowIfAny","empty",
"CulturedXunitTheoryTestCase","commander boundary","CulturedXunitTheoryTestCase","constructor",
"CulturedXunitTheoryTestCase","commander boundary","CulturedXunitTheoryTestCase","constructor",
"CulturedXunitTheoryTestCase","commander boundary","Deserialize","command collaborator",
"CulturedXunitTheoryTestCase","commander boundary","Initialize","set",
"CulturedXunitTheoryTestCase","commander boundary","Serialize","command collaborator",
"Issue1657","commander small-class","GlobalSetup","command",
"AsyncClass","boundary degenerate","SucceedAsync","wrapper stateless",
"AsyncClass","boundary degenerate","SucceedAsyncValueTask","wrapper stateless",
"AsyncClass","boundary degenerate","ReturnTaskInt","wrapper stateless",
"AsyncClass","boundary degenerate","ReturnValueTaskInt","factory collaborator stateless",
"AsyncClass","boundary degenerate","IncompleteTask","factory collaborator stateless",
"AsyncClass","boundary degenerate","ThrowTaskIntAsync<TException>","wrapper stateless",
"AsyncClass","boundary degenerate","ThrowValueTaskIntAsync<TException>","wrapper stateless",
"ExceptionWithProperties","empty","ExceptionWithProperties","constructor",
"ExceptionWithEmptyToString","degenerate small-class","ToString","incidental",
"InnerExceptionSpecs","pure-controller degenerate","When_subject_throws_an_exception_with_the_expected_inner_exception_it_should_not_do_anything","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","When_subject_throws_an_exception_with_the_expected_inner_base_exception_it_should_not_do_anything","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","When_subject_throws_an_exception_with_the_expected_inner_exception_from_argument_it_should_not_do_anything","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","WithInnerExceptionExactly_no_parameters_when_subject_throws_subclass_of_expected_inner_exception_it_should_throw_with_clear_description","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","WithInnerExceptionExactly_no_parameters_when_subject_throws_expected_inner_exception_it_should_not_do_anything","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","WithInnerExceptionExactly_when_subject_throws_subclass_of_expected_inner_exception_it_should_throw_with_clear_description","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","WithInnerExceptionExactly_with_type_exception_when_subject_throws_expected_inner_exception_it_should_not_do_anything","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","WithInnerExceptionExactly_with_type_exception_no_parameters_when_subject_throws_expected_inner_exception_it_should_not_do_anything","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","WithInnerExceptionExactly_with_type_exception_when_subject_throws_subclass_of_expected_inner_exception_it_should_throw_with_clear_description","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","WithInnerExceptionExactly_when_subject_throws_expected_inner_exception_it_should_not_do_anything","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","An_exception_without_the_expected_inner_exception_has_a_descriptive_message","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","When_subject_throws_an_exception_with_an_unexpected_inner_exception_it_should_throw_with_clear_description","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","When_subject_throws_an_exception_without_expected_inner_exception_it_should_throw_with_clear_description","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","When_an_inner_exception_matches_exactly_it_should_allow_chaining_more_asserts_on_that_exception_type","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","When_an_inner_exception_matches_exactly_it_should_allow_chaining_more_asserts_on_that_exception_type_from_argument","controller stateless",
"InnerExceptionSpecs","pure-controller degenerate","When_injecting_a_null_predicate_it_should_throw","controller stateless",
"UInt32Assertions","pure-controller degenerate small-class","UInt32Assertions","constructor",
"UInt32Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_expected_exception_with_an_expected_message_it_should_not_do_anything","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_expected_exception_but_with_unexpected_message_it_should_throw","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_expected_exception_with_message_starting_with_expected_message_it_should_not_throw","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_expected_exception_with_message_that_does_not_start_with_expected_message_it_should_throw","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_expected_exception_with_message_starting_with_expected_equivalent_message_it_should_not_throw","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_expected_exception_with_message_that_does_not_start_with_equivalent_message_it_should_throw","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_some_exception_with_unexpected_message_it_should_throw_with_clear_description","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_some_exception_with_an_empty_message_it_should_throw_with_clear_description","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_some_exception_with_message_which_contains_complete_expected_exception_and_more_it_should_throw","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_no_exception_was_thrown_but_one_was_expected_it_should_clearly_report_that","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_another_exception_than_expected_it_should_include_details_of_that_exception","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_subject_throws_exception_with_message_with_braces_but_a_different_message_is_expected_it_should_report_that","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_asserting_with_an_aggregate_exception_type_the_asserts_should_occur_against_the_aggregate_exception","controller stateless",
"OuterExceptionSpecs","pure-controller degenerate","When_asserting_with_an_aggregate_exception_and_inner_exception_type_from_argument_the_asserts_should_occur_against_the_aggregate_exception","controller stateless",
"FormattingOptions","factory controller small-class","Clone","property non-void-command factory",
"ThrowAssertionsSpecs","pure-controller degenerate","When_subject_throws_expected_exception_it_should_not_do_anything","controller stateless",
"ThrowAssertionsSpecs","pure-controller degenerate","When_func_throws_expected_exception_it_should_not_do_anything","controller stateless",
"ThrowAssertionsSpecs","pure-controller degenerate","When_action_throws_expected_exception_it_should_not_do_anything","controller stateless",
"ThrowAssertionsSpecs","pure-controller degenerate","When_subject_does_not_throw_exception_but_one_was_expected_it_should_throw_with_clear_description","controller stateless",
"ThrowAssertionsSpecs","pure-controller degenerate","When_func_does_not_throw_exception_but_one_was_expected_it_should_throw_with_clear_description","controller stateless",
"ThrowAssertionsSpecs","pure-controller degenerate","When_func_does_not_throw_it_should_be_chainable","controller stateless",
"ThrowAssertionsSpecs","pure-controller degenerate","When_action_does_not_throw_exception_but_one_was_expected_it_should_throw_with_clear_description","controller stateless",
"CallerIdentifierSpecs","degenerate","When_namespace_is_exactly_System_caller_should_be_unknown","controller stateless",
"CallerIdentifierSpecs","degenerate","When_namespace_is_nested_under_System_caller_should_be_unknown","controller stateless",
"CallerIdentifierSpecs","degenerate","When_namespace_is_prefixed_with_System_caller_should_be_known","controller stateless",
"CallerIdentifierSpecs","degenerate","When_variable_name_contains_Should_it_should_identify_the_entire_variable_name_as_the_caller","controller stateless",
"CallerIdentifierSpecs","degenerate","When_should_is_passed_argument_context_should_still_be_found","controller stateless",
"CallerIdentifierSpecs","degenerate","When_variable_is_captured_it_should_use_the_variable_name","controller stateless",
"CallerIdentifierSpecs","degenerate","When_field_is_the_subject_it_should_use_the_field_name","controller stateless",
"CallerIdentifierSpecs","degenerate","When_property_is_the_subject_it_should_use_the_property_name","controller stateless",
"CallerIdentifierSpecs","degenerate","When_method_name_is_the_subject_it_should_use_the_method_name","controller stateless",
"CallerIdentifierSpecs","degenerate","When_method_contains_arguments_it_should_add_them_to_caller","controller stateless",
"CallerIdentifierSpecs","degenerate","When_the_caller_contains_multiple_members_it_should_include_them_all","controller stateless",
"CallerIdentifierSpecs","degenerate","When_the_caller_contains_multiple_members_across_multiple_lines_it_should_include_them_all","controller stateless",
"CallerIdentifierSpecs","degenerate","When_arguments_contain_Should_it_should_include_that_to_the_caller","controller stateless",
"CallerIdentifierSpecs","degenerate","When_arguments_contain_semicolon_it_should_include_that_to_the_caller","controller stateless",
"CallerIdentifierSpecs","degenerate","When_there_are_several_statements_on_the_line_it_should_use_the_correct_statement","controller stateless",
"CallerIdentifierSpecs","degenerate","When_arguments_contain_escaped_quote_it_should_include_that_to_the_caller","controller stateless",
"CallerIdentifierSpecs","degenerate","When_arguments_contain_verbatim_string_it_should_include_that_to_the_caller","controller stateless",
"CallerIdentifierSpecs","degenerate","When_arguments_contain_multi_line_verbatim_string_it_should_include_that_to_the_caller","controller stateless",
"CallerIdentifierSpecs","degenerate","When_arguments_contain_verbatim_string_interpolation_it_should_include_that_to_the_caller","collaborator stateless",
"Int16Assertions","pure-controller degenerate small-class","Int16Assertions","constructor",
"Int16Assertions","pure-controller degenerate small-class","CalculateDifferenceForFailureMessage","controller stateless",
"MyCustomerAssertions","entity boundary small-class","MyCustomerAssertions","constructor",
"MyCustomerAssertions","entity boundary small-class","BeActive","void-accessor command collaborator",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_january_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_february_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_march_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_april_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_may_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_june_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_july_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_august_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_september_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_october_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_november_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_in_december_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_and_time_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_datetimeoffset_and_time_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_datetime_with_out_of_range_microseconds_it_should_throw","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_datetime_with_inrange_microseconds_it_should_not_throw","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_datetime_with_out_of_range_nanoseconds_it_should_throw","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_datetime_with_inrange_nanoseconds_it_should_not_throw","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_datetimeoffset_with_out_of_range_microseconds_it_should_throw","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_datetimeoffset_with_inrange_microseconds_it_should_not_throw","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_datetimeoffset_with_out_of_range_nanoseconds_it_should_throw","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_datetimeoffset_with_inrange_nanoseconds_it_should_not_throw","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_and_time_as_utc_it_should_return_the_date_time_value_with_utc_kind","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_and_time_as_local_it_should_return_the_date_time_value_with_local_kind","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","When_fluently_specifying_a_date_and_timespan_it_should_return_the_correct_date_time_value","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","Specyfing_the_time_of_day_retains_the_full_precision","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","Specifying_the_time_of_day_retains_the_datetime_kind","controller stateless",
"FluentDateTimeSpecs","pure-controller degenerate","Specifying_the_time_of_day_in_hours_and_minutes_retains_the_datetime_kind","controller stateless",
